{"componentChunkName":"component---src-templates-blog-post-js","path":"/web-view-ad-blocker/","result":{"data":{"site":{"siteMetadata":{"title":"Blog.kt"}},"markdownRemark":{"id":"21a4177a-1edd-545c-a189-ea8d8eff63c7","excerpt":"前言 查豆瓣 使用的是 WebView 加载页面，在豆瓣的移动页面中存在两到三个的广告轮播图，比较影响阅读体验。所以开始着手看看怎么屏蔽掉广告。 在 WebView 中有以下三个方法可以考虑： 方法会在页面加载完毕后回调 方法会通知 ，也就是启动 WebView…","html":"<h1>前言</h1>\n<p><a href=\"https://github.com/rosuH/SearchInDouban\">查豆瓣</a> 使用的是 WebView 加载页面，在豆瓣的移动页面中存在两到三个的广告轮播图，比较影响阅读体验。所以开始着手看看怎么屏蔽掉广告。</p>\n<p>在 WebView 中有以下三个方法可以考虑：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">onPageFinished</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span> WebView<span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">shouldInterceptRequest</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span> WebView<span class=\"token punctuation\">,</span> request<span class=\"token operator\">:</span> WebResourceRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> WebResourceResponse<span class=\"token operator\">?</span> \n<span class=\"token keyword\">fun</span> <span class=\"token function\">shouldOverrideUrlLoading</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span> WebView<span class=\"token punctuation\">,</span> request<span class=\"token operator\">:</span> WebResourceRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean </code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">onPageFinished</code>方法会在页面加载完毕后回调</p>\n</li>\n<li>\n<p><code class=\"language-text\">shouldInterceptRequest</code>方法会通知 <code class=\"language-text\">host Application</code>，也就是启动 WebView 的应用返回<code class=\"language-text\">WebResourceResponse</code>。如果本地应用返回<code class=\"language-text\">null</code>，则<code class=\"language-text\">webView</code>会正常加载资源</p>\n</li>\n<li>\n<p><code class=\"language-text\">shouldOverrideUrlLoading</code>会在<code class=\"language-text\">Url</code>被加载前被回调。实现此方法，返回<code class=\"language-text\">true</code>时<code class=\"language-text\">WebView</code>将不会加载该<code class=\"language-text\">Url</code>，否则将会正常加载<code class=\"language-text\">Url</code></p>\n<ul>\n<li>此方法仅在<strong>主动或被动调用</strong><code class=\"language-text\">WebView.load(url)</code>方法时才会回调，而页面中的资源加载时是不会被回调的\n<ul>\n<li>比如主动显式调用：<code class=\"language-text\">webview.load(url)</code></li>\n<li>被动则是页面中点击链接之后加载</li>\n</ul>\n</li>\n<li>此方法不适用于<code class=\"language-text\">POST</code>请求</li>\n</ul>\n<p>基于上述三个方法，我们看看能否做到：</p>\n<ol>\n<li>禁止加载广告域名</li>\n<li>给广告域名请求返回空的数据</li>\n<li>在页面加载完毕后消除广告占位的<code class=\"language-text\">div</code>或类似元素</li>\n</ol>\n</li>\n</ul>\n<h1>1. 禁止加载广告域名</h1>\n<p>根据<code class=\"language-text\">shouldOverrideUrlLoading()</code>方法的特性，我们几乎无法用之来屏蔽页面中加载的广告。</p>\n<p>在实践中，一般在这处理网页对本地资源的调用，比如最常见的拉起 APP 的操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">shouldOverrideUrlLoading</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span> WebView<span class=\"token punctuation\">,</span> request<span class=\"token operator\">:</span> WebResourceRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> url <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"douban:\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 拉起豆瓣 APP</span>\n        <span class=\"token function\">handleAppRequest</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">shouldOverrideUrlLoading</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此方法看起来应该是不行了。这一步也应该没法轻易办到。</p>\n<h1>2. 给广告域名请求返回空的数据</h1>\n<p>我们把目光聚集到了<code class=\"language-text\">shouldInterceptRequest()</code>方法，实际上这个方法的功劳最大。我们很轻易就是实现了广告拦截。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">shouldInterceptRequest</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span> WebView<span class=\"token punctuation\">,</span> request<span class=\"token operator\">:</span> WebResourceRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> WebResourceResponse<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isAdDomain</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">createEmptyResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">shouldInterceptRequest</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">createEmptyResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> WebResourceResponse <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">WebResourceResponse</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"text/plain\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"utf-8\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token function\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"\"</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">isAdDomain</span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"douban\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"baidu\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>前面提起的，此方法会在请求数据前回调。所以我们可以自己构建<code class=\"language-text\">WebResourceResponse</code>对象返回。</p>\n<p>豆瓣的移动端对接的是百度的推广，所以基本上广告域名都带有<code class=\"language-text\">baidu</code>的关键字。所以我这样就已经足够了。</p>\n<p>更一般的情况，我们可以自己维护规则列表或者，使用一些公开的<a href=\"https://easylist.to/easylist/easylist.txt\">规则列表</a>。或者自己收集一下常见的大的推广联盟的链接就可以了。</p>\n<h1>3. 消除空白广告元素</h1>\n<p>我们给广告请求返回了空数据，但是原有的广告占位元素依然存在。所以我们要用到</p>\n<p><code class=\"language-text\">onPageFinished()</code>方法，来删除广告占位标签。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onPageFinished</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span> WebView<span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    webView<span class=\"token punctuation\">.</span><span class=\"token function\">evaluateJavascript</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string-literal singleline\"><span class=\"token string\">\"javascript:(\"</span></span> <span class=\"token operator\">+</span>\n                <span class=\"token string-literal singleline\"><span class=\"token string\">\"    function() {\"</span></span> <span class=\"token operator\">+</span>\n                <span class=\"token string-literal singleline\"><span class=\"token string\">\"            var len = document.getElementsByClassName('Advertisement').length; \"</span></span> <span class=\"token operator\">+</span>\n                <span class=\"token string-literal singleline\"><span class=\"token string\">\"            for(var i = 0; i &lt; len; i ++){\"</span></span> <span class=\"token operator\">+</span>\n                <span class=\"token string-literal singleline\"><span class=\"token string\">\"                document.getElementsByClassName('Advertisement')[i].style.display = 'none'\"</span></span> <span class=\"token operator\">+</span>\n                <span class=\"token string-literal singleline\"><span class=\"token string\">\"            }\"</span></span> <span class=\"token operator\">+</span>\n                <span class=\"token string-literal singleline\"><span class=\"token string\">\"        }\"</span></span> <span class=\"token operator\">+</span>\n                <span class=\"token string-literal singleline\"><span class=\"token string\">\")()\"</span></span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里利用了<code class=\"language-text\">WebView.evaluateJavascript()</code>方法，执行了一段 JavaScript 代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">javascript</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> len <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Advertisement'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Advertisement'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里的代码需要你根据不同的页面来维护规则。比如豆瓣的移动端广告都用<code class=\"language-text\">Advertisement</code>作为类名。</p>\n<p>所以获取了个数之后，降之隐藏。</p>\n<h1>结语</h1>\n<p>至此，我们简单地实现了对豆瓣移动端网页的拦截。</p>\n<p>参考链接：</p>\n<ul>\n<li>\n<p><a href=\"https://developer.android.com/reference/android/webkit/WebView\">WebView Android Developer</a></p>\n</li>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/8200945/how-to-get-html-content-from-a-webview\">how to get html content from a webview?</a></p>\n</li>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/3029926/any-way-to-hide-elements-from-webview-android\">Any way to hide elements from webview? (android)</a></p>\n</li>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/24547446/android-block-ads-in-webview\">Android block ads in webview</a></p>\n</li>\n</ul>","frontmatter":{"title":"WebView 广告拦截浅析","date":"2019-02-12","description":null,"excerpt":null}},"previous":{"fields":{"slug":"coroutines-guide-ui"},"frontmatter":{"title":"【翻译】协程在 UI 编程中的使用指南"}},"next":{"fields":{"slug":"Manifesto-for-Minimalist-Software-Engineers-CN"},"frontmatter":{"title":"【翻译】极简主义工程师宣言"}}},"pageContext":{"id":"21a4177a-1edd-545c-a189-ea8d8eff63c7","previousPostId":"e0f1a748-d16e-5a8d-99cb-ac62e749c194","nextPostId":"0d7d276c-d513-5bb3-a22a-011b4416a739"}},"staticQueryHashes":["2082311839","2355076697","959449634"],"slicesMap":{}}