{"componentChunkName":"component---src-templates-blog-post-js","path":"/using-viewpager-to-make-a-banner-1/","result":{"data":{"site":{"siteMetadata":{"title":"Blog.kt"}},"markdownRemark":{"id":"bcc466db-9561-5893-88fe-45bae75c6ef5","excerpt":"简介 是 Android 提供的布局管理器，常被用来实现左右滑动的页面、视图。 在实际工程中，有许多都是用来实现轮播图功能的。 今天，我们从零开始造一个简易轮播图组件。 本系列文章面向的读者，是刚学完 Android…","html":"<h1>简介</h1>\n<p><code class=\"language-text\">Viewpager</code>是 Android 提供的布局管理器，常被用来实现左右滑动的页面、视图。</p>\n<p>在实际工程中，有许多都是用来实现轮播图功能的。</p>\n<p>今天，我们从零开始造一个简易轮播图组件。</p>\n<p>本系列文章面向的读者，是刚学完 Android 教材的初学者，旨在：</p>\n<ul>\n<li>简单介绍<code class=\"language-text\">ViewPager</code>原理并如何快速上手</li>\n<li>使用简单的代码结构，完成一个初级的轮播图组件</li>\n</ul>\n<blockquote>\n<p>文章作者毕竟经验不多，水平有限，所以缺漏在所难免，希望路过读到本文的前辈们不吝赐教，谢谢~</p>\n</blockquote>\n<p>接下来，我们就从<code class=\"language-text\">Viewpager</code>是什么开始，慢慢来了解他。</p>\n<h1>1. Viewpager 上手</h1>\n<p><a href=\"https://developer.android.com/reference/android/support/v4/view/ViewPager.html\">官方开发文档：android.support.v4.view.ViewPager</a></p>\n<ul>\n<li>\n<p><code class=\"language-text\">ViewPager</code>是一个布局管理器，可以作为根布局</p>\n<ul>\n<li>因为他继承于<code class=\"language-text\">ViewGroup</code>，常见的布局管理器还有<code class=\"language-text\">FrameLayout</code>, <code class=\"language-text\">LinearLayout</code>等</li>\n<li>当他作为根布局时，每一个页面都将占据整个布局</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">ViewPager</code>该怎么使用</p>\n<ul>\n<li>在布局文件中添加一个<code class=\"language-text\">&lt;ViewPager></code>标签，此位置作为<code class=\"language-text\">ViewPager</code>容器主体所在</li>\n<li>创建一个新的布局文件，作为内嵌页面的布局\n<ul>\n<li>如果使用<code class=\"language-text\">fragment</code>的话，我们只需要创建一个模板，之后所有内嵌页面都使用这个模板来生成即可</li>\n<li>如果单单使用布局文件，那么我们每一个页面项都要创建一个布局文件，之后手动添加<code class=\"language-text\">ViewPager</code>容器</li>\n<li>所以本文章均使用<code class=\"language-text\">fragment</code>来实现</li>\n</ul>\n</li>\n<li>在<code class=\"language-text\">activity</code>中，实例化<code class=\"language-text\">ViewPager</code></li>\n<li>为<code class=\"language-text\">ViewPager</code>设置<code class=\"language-text\">Adapter</code>\n<ul>\n<li>类似于<code class=\"language-text\">RecyclerView</code>，我们也是使用<code class=\"language-text\">Adapter</code>来和<code class=\"language-text\">ViewPager</code>进行通信</li>\n<li>这样大大方便了我们使用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>上述步骤中，前几步几乎是组件/布局实例化的常规操作，所以我们真正要做的其实非常少。</p>\n<p>接下来我们开始动手来使用<code class=\"language-text\">ViewPager</code>。</p>\n<h2>创建 ViewPager 容器和子页面布局文件</h2>\n<p>我们新建一个项目之后，打开默认创建的<code class=\"language-text\">activity_main.xml</code>布局文件中，将内容改为以下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RelativeLayout</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>android.support.v4.view.ViewPager</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/view_pager_inside<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>400dp<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>400dp<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>background</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@android:color/darker_gray<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_centerInParent</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>android.support.v4.view.ViewPager</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RelativeLayout</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>可以看到，布局文件中仅有一个根布局<code class=\"language-text\">RelativeLayout</code>和一个<code class=\"language-text\">ViewPager</code>。</p>\n<p>这里的<code class=\"language-text\">ViewPager</code>就是容器主体所在。</p>\n<p>接着我们创建嵌入的页面布局文件：</p>\n<p>新建一个<code class=\"language-text\">view_pager_fragment.xml</code>文件，内容如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LinearLayout</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>app</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res-auto<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>gravity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>orientation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vertical<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>android.support.v7.widget.CardView</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/card_view<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300dp<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300dp<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>cardCornerRadius</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10dp<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>elevation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5dp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextView</span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/text_view_fragment<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_gravity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>android.support.v7.widget.CardView</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LinearLayout</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>这里面是常规布局，有一个卡片<code class=\"language-text\">CardView</code>和内藏一个的<code class=\"language-text\">TextView</code>。</p>\n<p>到时候，滑动的每一个页面的布局模板都来自这个文件，我们只需要在代码里稍微修改，就可以生成特定的页面了。</p>\n<p>现在，我们回到<code class=\"language-text\">MainActivity.java</code>文件中，实例化我们刚刚的<code class=\"language-text\">ViewPager</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 定义一个 Viewpager 变量</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ViewPager</span> mViewPager<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token comment\">// 实例化 ViewPager</span>\n        mViewPager <span class=\"token operator\">=</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>view_pager_inside<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来我们该干什么呢？当然是为<code class=\"language-text\">ViewPager</code>添加页面了。</p>\n<p>那么页面从哪里来呢？当然是我们之前创建的那个布局<code class=\"language-text\">view_page_fragment.xml</code>了。</p>\n<ul>\n<li>我们的<code class=\"language-text\">ViewPager</code>主体位于<code class=\"language-text\">activity_main.xml</code>布局中\n<ul>\n<li>我们在<code class=\"language-text\">MainActivity.java</code>中使用<code class=\"language-text\">setContentView(R.layout.activity_main);</code> 设置两者关联</li>\n<li>然后我们可以在<code class=\"language-text\">MainActivity.java</code>里面实例化<code class=\"language-text\">ViewPager</code>并使用它</li>\n</ul>\n</li>\n<li>同理，我们要创建一个<code class=\"language-text\">Fragment</code>，将它和<code class=\"language-text\">view_page_fragment.xml</code>关联起来，并在它里面实例化页面的布局</li>\n</ul>\n<p>不理解<code class=\"language-text\">Fragment</code>的同学，可以看一下文档里的 <a href=\"https://developer.android.com/guide/components/fragments.html\">片段</a> 哦。</p>\n<p>创建一个<code class=\"language-text\">PageFragment.java</code>类，继承于<code class=\"language-text\">android.support.v4.app.Fragment</code>，这里特别注意要使用<code class=\"language-text\">v4</code>包里的<code class=\"language-text\">Fragment</code>。</p>\n<p>现在这个类里空荡荡，让我们来填充一些有意思的内容。</p>\n<ol>\n<li>关联<code class=\"language-text\">PageFragment.java</code>和<code class=\"language-text\">view_page_fragment.xml</code></li>\n</ol>\n<p>使用<code class=\"language-text\">Alt + Insert</code>，选择<code class=\"language-text\">Override Methods</code>，然后重写<code class=\"language-text\">onCreateView</code>如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TextView</span> mTextView<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CardView</span> mCardView<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">View</span> <span class=\"token function\">onCreateView</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">LayoutInflater</span> inflater<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">ViewGroup</span> container<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> inflater<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>view_pager_fragment<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        mTextView <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>text_view_fragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mCardView <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>card_view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> view<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们使用了<code class=\"language-text\">LayoutInflater</code>来将<code class=\"language-text\">view_page_fragment.xml</code>加载为代码里的<code class=\"language-text\">View</code>对象，然后再从<code class=\"language-text\">view</code>对象里，找到我们放置的两个组件：<code class=\"language-text\">CardView</code>和<code class=\"language-text\">TextView</code>。</p>\n<p>如果不理解<code class=\"language-text\">LayoutInflater</code>可以看看如下两位的文章：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/sinyu890807/article/details/12921889\">Android LayoutInflater原理分析，带你一步步深入了解View(一)</a></li>\n<li><a href=\"https://www.jianshu.com/p/81a698aaf05c\">理解Android中的LayoutInflater</a></li>\n</ul>\n<p>这样就算是关联起来了，系统在创建<code class=\"language-text\">PageFrament.java</code>对象的时候，就会实例化<code class=\"language-text\">view_page_fragment.xml</code>布局了。</p>\n<p>接着我们为<code class=\"language-text\">PageFragment.java</code>创建一个静态生成器（方法）。为什么要静态生产类呢？</p>\n<p>因为我们每生成一个页面，其实就是创建一个<code class=\"language-text\">PageFragment.java</code>的对象，然后我们还要向这个对象传递数据。</p>\n<p>为了不做重复的工作，我们写一个静态生成器，这样每次外部类只要调用这个静态生成器，就可以很简单地创建对象了。</p>\n<p>看看代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PageFragment</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fragment</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Fragment</span> <span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PageFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">View</span> onCreateView <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果你写过静态<code class=\"language-text\">Intent</code>生成方法，相信这个类生成器也很容易理解了。</p>\n<p>上面代码就是在返回时，先创建一个<code class=\"language-text\">PageFragment</code>对象再返回去。就这一句代码，有必要写一个静态方法吗？</p>\n<p>当然有，因为我们还没有把他真正的用处挖掘出来呢！</p>\n<p>前面说到的，我们之所以只需要创建一个布局模板文件，而不需要每一个页面就定制一个，就是我们要在代码里动态定制页面。</p>\n<p>我们这里子页面模板里，只有一个<code class=\"language-text\">TextView</code>可以写东西，所以我们用它来作为区分页面的标志，比如<code class=\"language-text\">T1</code>、<code class=\"language-text\">T2</code>这样。</p>\n<p>那问题就是，我们如何动态定制页面呢？</p>\n<p>我们来看看现在的情况吧：</p>\n<p><img src=\"https://img.ioioi.top/wiki/chrome_2018-04-20_22-28-55.png\" alt=\"pic\"></p>\n<p>可以看到，这是典型的 MVC 结构，在这里面呢，<code class=\"language-text\">PageFragment</code>唯一地通过<code class=\"language-text\">MainActivity.java</code>来创建，虽然我们还没有实现这一步。</p>\n<p>也即是说，我们要在这一步里，向<code class=\"language-text\">PageFragment</code>传递定制化的数据，比如页面一传递<code class=\"language-text\">T1</code>，页面二传递<code class=\"language-text\">T2</code>这样子。</p>\n<p>接着在<code class=\"language-text\">PageFragment</code>只需要使用同一套代码就可以生成不同的页面了。</p>\n<p>问题的难点在于如何向一个<code class=\"language-text\">Fragment</code>传递数据。当然，这样的文章已经写了很多了，相信你稍微搜索一下，就知道我们即将使用的是<code class=\"language-text\">Fragment Arguement</code>的方法。其实就是在<code class=\"language-text\">fragment</code>对象上附加一个参数。</p>\n<p>这种方法是不是很像<code class=\"language-text\">Intent</code>的附加参数呢？</p>\n<p>下面是实现代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PageFragment</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fragment</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">ARGS_TITLE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"argsTitle\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CardView</span> mCardView<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TextView</span> mTextView<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Fragment</span> <span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Bundle</span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        args<span class=\"token punctuation\">.</span><span class=\"token function\">putString</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ARGS_TITLE</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">PageFragment</span> pageFragment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PageFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pageFragment<span class=\"token punctuation\">.</span><span class=\"token function\">setArguments</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> pageFragment<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">View</span> onCreateView <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在这里面，我们使用了<code class=\"language-text\">Bundle</code>对象来存储要传递的数据，然后使用<code class=\"language-text\">setArguement()</code>方法来把参数附加到新建的<code class=\"language-text\">pageFragment</code>对象里面。</p>\n<p>最后返回这个对象即可。</p>\n<p>接下来我们就可以在<code class=\"language-text\">MainActivity.java</code>里面使用这个静态生成器。（我只列出了新增的代码哦）</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mStringList <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"T1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"T5\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token class-name\">FragmentManager</span> fm <span class=\"token operator\">=</span> <span class=\"token function\">getSupportFragmentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      \n        mViewPager<span class=\"token punctuation\">.</span><span class=\"token function\">setAdapter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FragmentPagerAdapter</span><span class=\"token punctuation\">(</span>fm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Fragment</span> <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n                <span class=\"token class-name\">String</span> title <span class=\"token operator\">=</span> mStringList<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">PageFragment</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> mStringList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里我们先定义了一个字符串数组，来存储文字字符串。也就是之前图片的【模型】区域。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">FragmentManager</span> fm <span class=\"token operator\">=</span> <span class=\"token function\">getSupportFragmentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这句代码是获取一个<code class=\"language-text\">FragmentManager</code>，也就是<code class=\"language-text\">fragment</code>的管理器。接下来在<code class=\"language-text\">ViewPager</code>中需要用这个管理器来管理<code class=\"language-text\">fragment</code>。（别担心，这里系统已经帮你做好了，你只要传入一个管理器就行。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">mViewPager<span class=\"token punctuation\">.</span><span class=\"token function\">setAdapter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FragmentPagerAdapter</span><span class=\"token punctuation\">(</span>fm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这一句也好理解，前面说了，<code class=\"language-text\">ViewPager</code>也需要一个对应的<code class=\"language-text\">Adapter</code>来和他通信，幸运的是系统已经为我们提供了两个非常好用的<code class=\"language-text\">Fragment</code>的<code class=\"language-text\">Adapter</code>。</p>\n<ul>\n<li><code class=\"language-text\">FragmentPagerAdapter</code>\n<ul>\n<li>会提前自动创建：前中后，三个页面</li>\n<li>适合页面布局简单的情况</li>\n</ul>\n</li>\n<li><code class=\"language-text\">FragmentStatePagerAdapter</code>\n<ul>\n<li>只会创建一个页面</li>\n<li>适合页面布局复杂的情况</li>\n</ul>\n</li>\n</ul>\n<p>所以我们这里使用了<code class=\"language-text\">FragmentPagerAdapter</code>咯。</p>\n<p>使用这个<code class=\"language-text\">FragmentPagerAdapter</code>，最少只需要重写两个方法：</p>\n<ul>\n<li><code class=\"language-text\">getItem()</code>\n<ul>\n<li>通过<code class=\"language-text\">position</code>参数，返回一个创建好的页面</li>\n<li>我们就要在这里面做页面的创建工作哦</li>\n</ul>\n</li>\n<li><code class=\"language-text\">getCount()</code>\n<ul>\n<li>要创建的页面的数量</li>\n</ul>\n</li>\n</ul>\n<p>理解到这里，我们只需要在这段代码后面，轻轻加上一句：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">mViewPager<span class=\"token punctuation\">.</span><span class=\"token function\">setCurrentItem</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然后构建、运行，这个 Demo 就做好啦！</p>\n<p>快试试效果吧~</p>\n<p>试完了吗？是不是感觉哪里不对劲？</p>\n<h3>TextView 呢？</h3>\n<p>对啊，因为你虽然在<code class=\"language-text\">newInstance</code>里存放了数据，但是你并没有取出来呀~</p>\n<p>来到<code class=\"language-text\">PageFragment</code>里取出来吧。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">View</span> <span class=\"token function\">onCreateView</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">LayoutInflater</span> inflater<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">ViewGroup</span> container<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> inflater<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>view_pager_fragment<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mTextView <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>text_view_fragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mCardView <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>card_view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> title <span class=\"token operator\">=</span> <span class=\"token function\">getArguments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ARGS_TITLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mTextView<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> view<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在不就可以了嘛~</p>\n<p>什么？你嫌一个<code class=\"language-text\">TextView</code>太单调？…</p>\n<p>那你干嘛不加一个<code class=\"language-text\">ImageView</code>进去啊，然后传入一些令人<strong>心旷神怡</strong>的图片还不是美滋滋？</p>\n<p><img src=\"https://img.ioioi.top/wiki/viewpagerdemo.gif\" alt=\"Viewpager\"></p>\n<hr>\n<ul>\n<li>\n<p>本项目地址<a href=\"https://github.com/rosuH/ViewPagerDemo\"><strong>ViewPagerDemo</strong></a></p>\n</li>\n<li>\n<p>感谢下列参考文章</p>\n<ul>\n<li>\n<p><a href=\"https://blog.csdn.net/u012760183/article/details/52230786\">Android ViewPager 无限循环左右滑动（可自动） 实现</a></p>\n</li>\n<li>\n<p><a href=\"https://www.jianshu.com/p/8744f1ace3be\">Android ViewPager实现循环滚动</a></p>\n<p>​</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>接下来的文章会实现<strong>无限循环滑动</strong>、<strong>页面指示器</strong>，敬请期待~</p>","frontmatter":{"title":"手动实现轮播图（一）：ViewPager 入门实践","date":"2018-04-20","description":"本文是系列文章第一篇，先来简单上手 ViewPager","excerpt":null}},"previous":{"fields":{"slug":"Use-NW-to-build-a-web-app"},"frontmatter":{"title":"使用 NW.js 创建简单的桌面应用"}},"next":{"fields":{"slug":"using-viewpager-to-make-a-banner-2"},"frontmatter":{"title":"手动实现轮播图（二）：循环滚动、定时切换与指示器"}}},"pageContext":{"id":"bcc466db-9561-5893-88fe-45bae75c6ef5","previousPostId":"98393af1-24c6-5be3-8228-08b237579199","nextPostId":"4fe4a600-22a5-5462-bb77-0e126f0c47c5"}},"staticQueryHashes":["2082311839","2355076697","959449634"],"slicesMap":{}}