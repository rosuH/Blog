{"componentChunkName":"component---src-templates-blog-post-js","path":"/lets-using-https/","result":{"data":{"site":{"siteMetadata":{"title":"Blog.kt"}},"markdownRemark":{"id":"4d27c5a0-46b4-5941-ba1d-a2235a024afb","excerpt":"1.0 什么是HTTPS？ HTTPS == HTTP + SSL 数字证书认证机构、数字证书 1.1 客户端通过HTTPS和服务器通信过程 经过上面的一些资料的补充，相信你已经对HTTPS有了基本的认知了，下面我简介一下HTTTPS通信、证书和认证的一些细节 CA(数字证书认证机构)和你服务器的关系 你向CA…","html":"<h1>1.0 什么是HTTPS？</h1>\n<ol>\n<li>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE\">HTTPS</a> == HTTP + <a href=\"https://en.wikipedia.org/wiki/Transport_Layer_Security\">SSL</a></p>\n</li>\n<li>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E8%AE%A4%E8%AF%81%E6%9C%BA%E6%9E%84\">数字证书认证机构</a>、<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%AD%90%E8%AD%89%E6%9B%B8\">数字证书</a></p>\n</li>\n</ol>\n<h2>1.1 客户端通过HTTPS和服务器通信过程</h2>\n<p>经过上面的一些资料的补充，相信你已经对HTTPS有了基本的认知了，下面我简介一下HTTTPS通信、证书和认证的一些细节</p>\n<ol>\n<li>CA(数字证书认证机构)和你服务器的关系</li>\n</ol>\n<ul>\n<li>你向CA递交你域名的证书申请；</li>\n<li>CA验证你对你的域名和服务器有控制权：可能是发邮件或在你的服务器绑定证书</li>\n<li>CA向你发放证书</li>\n<li>将证书保存在服务器上（针对于VPS）</li>\n<li>当用户访问你的网站时，你的服务器会先向用户（的浏览器）发送你的证书以及公钥</li>\n<li>你用户的浏览器根据保存在浏览器中的<strong>根受信任的颁发者列表</strong>查询你网站的可信任信息并验证\n请看下图：\n<img src=\"https://ooo.0o0.ooo/2016/08/12/57ad97cd8ebeb.png\" alt=\"201012272252173749.png\">\n<em>图片来自<a href=\"http://www.cnblogs.com/P_Chou/archive/2010/12/27/https-ssl-certification.html\">浅谈https\\ssl\\数字证书</a></em></li>\n</ul>\n<ol start=\"2\">\n<li>通信过程（SSL加密过程）//<em>假设用户为A，你的网站B</em>\n<ul>\n<li>B生成私玥和与之对应的公钥（不同用户生成不同公玥）</li>\n<li>A使用B的公钥加密信息发送给B</li>\n<li>B使用密钥解密\n值得注意的是，上述中，只有与之对应的密钥才能解密，而又因为不同客户端得到了不同的公钥，故而别人无法使用其他密钥进行解密。\n如果你有一个疑问，那就是『HTTPS能否被劫持吗？』\n那么我们假设黑客（<em>他的服务器为C</em>）想要获取我们的加密信息内容，他大概可以这么入手（肯定有其他方式，然而我不是黑客我想不到…）:</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>\n<p>获取私玥</p>\n<ul>\n<li><strong>反向解密出私玥</strong>：目前基本不可能做到…</li>\n<li><strong>拿下CA</strong>:获得所有其名下的证书、私玥。基本不可能，但是还是该选一家靠谱的CA才行…</li>\n</ul>\n</li>\n<li>\n<p>欺骗服务器和浏览器</p>\n<ul>\n<li>第一种方式：C作为中间人，替换服务器发下的公钥为C的假公钥；C接受客户端利用假公钥加密的信息并使用自己的私钥解密。</li>\n<li>第二种方式：大致同上，但是此时C和服务器形成HTTPS然而客户端和C只是HTTP，也就是剥离ssl层。</li>\n</ul>\n</li>\n<li>\n<p>解密（一定需要私钥）\n我就不班门弄斧了，总之就是现在，比较安全就是了。\n你可以参看下面的资料：</p>\n</li>\n</ul>\n<ol>\n<li><a href=\"http://www.zhihu.com/question/22795329\">https可能被这样劫持吗</a></li>\n<li><a href=\"http://www.zhihu.com/question/22779469\">使用HTTPS的网站也能被黑客监听到数据吗？</a></li>\n<li><a href=\"http://wenku.baidu.com/view/def00c6858fafab069dc02f1.html\">基于SSLStrip的HTTPS会话劫持</a></li>\n</ol>\n<h1>部署HTTPS</h1>\n<p>部署HTTPS有简单也有稍显麻烦，更有一劳永逸的；我尝试<em>雨露均沾</em>一下…\n同时，我下面写的一般都是<strong>DV证书</strong>，也就是域名核准证书。\n这一类证书<strong>只验证域名所有权，加密链接；并不会验证申请者的真实身份或组织</strong>。\n这是比较简单的一种方式。一般来说，个人网站并不太在意（如果你的网站需要交易除外）。但是也有一些CA不看好DV证书，因为这样的证书降低了犯罪成本（罪犯们可以随意申请证书以增加页面的可信度）。\n但是另一方面，这样也可以普及HTTPS的使用，有利有弊。\n最重要的原因，<strong>这是免费的…</strong>\n而且，主流浏览器的状态栏都会显示小绿锁。\nDV和OV型证书在用户查看证书的详情是，OV型证书会在证书的Subject中显示域名+单位名称等信息；DV型证书只会在证书的Subject中显示域名。</p>\n<h2>2.1 商业CA的免费DV证书申请</h2>\n<p>这一类算是比较简单的，步骤都可以简述出来：</p>\n<ol>\n<li>递交申请</li>\n<li>验证域名所有权</li>\n<li>服务器绑定证书\n比较常见 DV 证书提供方有~~<a href=\"https://freessl.wosign.com/\">沃通</a><del>、</del><a href=\"https://www.startssl.com/\">Strat ssl</a>~~、<a href=\"https://letsencrypt.org/\">Let’s Encrypt</a>和<a href=\"http://www.instantssl.cn/\">COMODO</a></li>\n</ol>\n<hr>\n<p><em>update 2016-11-11</em>:</p>\n<p><strong>谷歌和火狐相继宣布停止信任沃通和 StartCom 的证书，在 2016 年 10 月 21 日后被签发的证书都将不被信任</strong>。</p>\n<ul>\n<li>现在阿里和腾讯都有赛门铁克的一年免费DV证书，推荐使用这一个，很简便</li>\n<li>或者使用 Let’s Encrypt 申请证书</li>\n</ul>\n<h2>2.2  利用<a href=\"https://www.cloudflare.com/\">CloudFlare</a> 部署HTTPS</h2>\n<p>为什么要把这个单独出来讲呢？因为我觉得CloudFlare确实比较良心和方便…(以至于我一直被坑…</p>\n<ul>\n<li>此处的 CF 颁发的证书属于自签证书，只被 CF 自己认可</li>\n<li>如果你不是使用 CF 的 CDN 的话，这个证书的没法使用的</li>\n</ul>\n<p>// update 2017年7月7日10:34:07</p>\n<p><strong>推荐直接使用 Let’s Encrypt 申请证书，可以自签也可以选择一键脚本</strong>。</p>\n<p>// end</p>\n<h3>2.2.1 利用<a href=\"https://www.cloudflare.com/\">CloudFlare</a>签发并部署DV证书</h3>\n<ol>\n<li>\n<p><strong>把域名托管在<a href=\"https://www.cloudflare.com/\">CloudFlare</a></strong></p>\n</li>\n<li>\n<p><strong>进入『Crypto』</strong>\n<img src=\"https://ooo.0o0.ooo/2016/08/12/57ada5ca32ea1.png\" alt=\"sp160812_183102.png\"></p>\n</li>\n<li>\n<p><strong>把『ssl』选项设为『FULL』或者『FULL(strict)』</strong>\n<img src=\"https://ooo.0o0.ooo/2016/08/12/57ada622f17d8.png\" alt=\"sp160812_183327.png\">\n**注意：**在这里解释一下三个选项的意思</p>\n<ul>\n<li>Flexible</li>\n<li>浏览者到 CDN 是使用 HTTPS 的，但是 CDN 到你的服务器则是 HTTP</li>\n<li><strong>注意！此时 CND 会强制使用 HTTP 访问，意味着如果你在你的服务器使用 301 跳转到 HTTPS，就会导致无限的重定向！</strong></li>\n<li>FULL</li>\n<li>浏览者—>HTTPS—>CDN—>VPS</li>\n<li>CF 不会验证你的证书</li>\n<li>一般适用于自签证书</li>\n<li>FULL(strict)</li>\n<li>浏览者—>HTTPS—>CDN—>VPS</li>\n<li>CF 会和 CA 验证证书</li>\n<li>一般适用于 CA 签发的证书</li>\n</ul>\n<p>​</p>\n<p>无论你选择了是『Full』或是『FULL(strict)』\n如果你在添加域名(add site)的时候，选择了他的CDN加速服务比如下图：\n<img src=\"https://ooo.0o0.ooo/2016/08/12/57ae8fc07bc52.png\" alt=\"sp160813_110954.png\">\n此时你在浏览器的证书详情里，显示的会是他的CND的域名。你是看不到你的域名的：\n<img src=\"https://ooo.0o0.ooo/2016/08/12/57ae90cb70a57.png\" alt=\"sp160812_100948.png\">\n而且此时，你去<a href=\"https://www.ssllabs.com/ssltest/index.html\">SSL评分</a>的时候，也只会显示此CND的评分:\n<img src=\"https://ooo.0o0.ooo/2016/08/12/57ae9125e3c94.png\" alt=\"sp160812_102305.png\">\n​</p>\n</li>\n<li>\n<p>选择『Create Certificate』</p>\n</li>\n</ol>\n<p><strong>如果你选择的是 CF 的证书（如下图），是一种 CF 自己发行的 TLS 证书，安全系数并不高</strong>。最好自己购买上面说的那些。</p>\n<p><img src=\"https://ooo.0o0.ooo/2016/08/12/57ae922467cb0.png\" alt=\"sp160813_112021.png\"></p>\n<ol start=\"5\">\n<li>选择『ECDSA』算法，并且选择你的服务器类型。这里我选了Nginx。</li>\n</ol>\n<p><img src=\"https://ooo.0o0.ooo/2016/08/12/57ae930ae7d4e.png\" alt=\"sp160813_112245.png\">\n<img src=\"https://ooo.0o0.ooo/2016/08/12/57ae930adf76e.png\" alt=\"sp160813_112344.png\"></p>\n<p>那个证书期限默认就行，你也可以自己定义一个日期。无所谓。\n接着你会得到一个根证书(Original Certificate)和一个私钥(Private Key)。文件格式选择PEM即可：</p>\n<p><img src=\"https://ooo.0o0.ooo/2016/08/12/57ae9a461c1f8.png\" alt=\"sp160813_115249.png\">\n复制里面的字符，保存到名字相对应的pem文件中，或者直接下载也行。\n然后上传文件到你的nginx服务器\n接着进行：</p>\n<ol start=\"6\">\n<li>Nginx服务配置</li>\n</ol>\n<p>思路就是，</p>\n<ul>\n<li>把原来的网站端口（默认80端口）改为443端口</li>\n<li>开启SSL</li>\n<li>设置证书和私钥</li>\n<li>将80端口重定向至443端口，强制开启HTTPS\n实施：\n由于我的网站配置是在单独的配置文件中的，位于<code class=\"language-text\">/usr/local/nginx/conf/vhost/www.rosuh.me.conf</code>，所以我直接修改这个文件。如果你是把网站服务写在nginx的主配置中的，那就修改<code class=\"language-text\">/usr/local/nginx/conf/nginx.conf</code></li>\n<li>修改端口</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\">#原来的配置</span>\nserver<span class=\"token punctuation\">{</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name <span class=\"token punctuation\">..</span>.\n    <span class=\"token punctuation\">..</span>.\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#修改之后</span>\nserver<span class=\"token punctuation\">{</span>\n    listen <span class=\"token number\">443</span><span class=\"token punctuation\">;</span>\n    server_name <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>原来通过80端口（http）的访问已经失效了，必须指定443端口访问才行。</p>\n<ul>\n<li>开启ssl并进行基础配置</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\">#从上面的配置接下去，而不是重新写一个server</span>\nserver<span class=\"token punctuation\">{</span>\n    listen <span class=\"token number\">443</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">#如果你还想你的http能正常使用的话，可以加上80端口并存</span>\n<span class=\"token comment\">#    listen 80;</span>\n    server_name <span class=\"token punctuation\">..</span>.\n    ssl     on<span class=\"token punctuation\">;</span>\n    ssl_certificate   /home/www/ssl/OriginalCertificate.pem<span class=\"token punctuation\">;</span>\n    ssl_certificate_key    /home/www/ssl/PrivateKey.pem<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这只是基础配置，评分不高，但是先测试是否可行。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">service</span> nginx <span class=\"token parameter variable\">-t</span> <span class=\"token operator\">&amp;&amp;</span><span class=\"token function\">service</span> nginx <span class=\"token parameter variable\">-s</span> reload</code></pre></div>\n<ul>\n<li>重定向80端口\n完成至此，也只是让https可用，也就是用户必须再你的域名前面加上https才行，这样很不友好并且不安全。同时此时你的http不可用哦，因为我们把80端口删掉了，你也可以加上80端口，这样会保证https不可用的时候http还能正常使用。\n如果是不需要80端口，想强制HTTPS访问的，就需要\n配置重定向：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">server <span class=\"token punctuation\">{</span>\n    listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    server_name www.rosuh.me  rosuh.me<span class=\"token punctuation\">;</span>\n    location / <span class=\"token punctuation\">{</span>\n        rewrite ^/<span class=\"token punctuation\">(</span>.*<span class=\"token punctuation\">)</span>$ https://rosuh.me/<span class=\"token variable\">$1</span> permanent<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>至此，基础配置HTTPS就算完成了。照道理现在应该可以的了。\n下面介绍另一种方法：</p>\n<h3>2.2.2 使用 Let’s Encrypt 证书部署HTTPS</h3>\n<p>这一步和上述有所不同，你需要自行创建私钥和证书申请文件。</p>\n<p>动手能力强的可以选择下面的教程中的自签，如果想省事可以直接使用<code class=\"language-text\">amce.sh</code>一键脚本。</p>\n<blockquote>\n<p><a href=\"https://github.com/Neilpang/acme.sh\">acme.sh</a></p>\n</blockquote>\n<p>对于自己动手，我们的思路是：</p>\n<ol>\n<li>创建私钥和申请文件</li>\n<li>验证所有权</li>\n<li>CloudFlare设置\n**注意：**在进行之前，我假设你已经把域名托管在CloudFlare，为什么要这样做呢？后面我会解释的。</li>\n</ol>\n<p><strong>这些步骤网上教程很多，我也是从网上的前辈那里学习的，尚不能自己完整地写出来。为了避免写错，耽误各位，还是请诸君务必自行移步到下面的网址查看</strong>\n<a href=\"https://imququ.com/post/letsencrypt-certificate.html\">Let’s Encrypt，免费好用的 HTTPS 证书</a>\n这位作者的教程很详尽，并且很完整；同时他的博客内有很多文章都是很棒的，对我们的此次行动有很多指导意义。\n我狗尾续貂一下，关于上面文章中有讲过两个可能发生的错误的一些解决方法：</p>\n<ul>\n<li>『提示没有找到openssl.cnf』\n由于环境配置不一，可以使用<code class=\"language-text\">find</code>命令进行查找：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-name</span> openssl.cnf</code></pre></div>\n<p>然后替换原来教程的命令行中即可</p>\n<ul>\n<li>『获取网站证书失败』\n提示：</li>\n</ul>\n<blockquote>\n<p>ValueError: Wrote file to /home/xxx/www/challenges/oJbvpIhkwkBGBAQUklWJXyC8VbWAdQqlgpwUJkgC1Vg, but couldn’t download <a href=\"http://www.yoursite.com/.well-known/acme-challenge/oJbvpIhkwkBGBAQUklWJXyC8VbWAdQqlgpwUJkgC1Vg\">http://www.yoursite.com/.well-known/acme-challenge/oJbvpIhkwkBGBAQUklWJXyC8VbWAdQqlgpwUJkgC1Vg</a></p>\n</blockquote>\n<p>原作者也说了，是因为域名在国外无法解析。我发现也是这个原因，所以我才在开头说，要把域名托管在Cloudflare上。并且由于域名DNS服务器换了之后，需要一定时间更新缓存，所以需要耐心等待才行…</p>\n<ul>\n<li>『crontab not found』\ncrontab没有安装的缘故，使用下面命令进行安装：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">yum <span class=\"token function\">install</span> cronie</code></pre></div>\n<p>接着我们要进行Cloudflare的设置才能正常访问，并且获得测试的正确结果。\n或者在申请完证书之后，就把域名DNS修改为其他的服务商，比如阿里。</p>\n<ul>\n<li>进行ssl评测的必要条件\n<ul>\n<li>没有使用CDN</li>\n<li>Cloudflare的ssl选项选择『off』\n具体可以参照我前面的图片。</li>\n</ul>\n</li>\n<li>正常访问\n<ul>\n<li>可以开启CDN</li>\n<li>SSL选项不能选择『Flexible』，此时无论如何你都无法使用HTTPS访问你的网站，会造成301重定向循环</li>\n<li>最好开启HSTS，如果你的DNS修改了，那就自行在nginx配置中加入\n<img src=\"https://ooo.0o0.ooo/2016/08/13/57aec7ac392cf.png\" alt=\"sp160813_150841.png\">\nHSTS指的是，只要该用户曾经使用过HTTPS链接你的网站，那么以后就会一直使用HTTPS链接。如果你证书过期了…就不能连上了。\n**注意：**在Cloudflare的『OverView』选项中：\n<img src=\"https://ooo.0o0.ooo/2016/08/13/57aec8c6b3b78.png\" alt=\"sp160813_151241.png\">\n如果你不需要Cloudflare的其他功能，只想让他实现一个DNS的功能，那就选择『Pause』，该选项会停止他的其他服务。</li>\n</ul>\n</li>\n</ul>\n<p>现在，大致可以了。你可以先去评分，然后完善你的配置。\n可以同样参看<a href=\"https://imququ.com\">Jerry Qu</a>的配置：\n<a href=\"https://imququ.com/post/my-nginx-conf.html\">本博客 Nginx 配置之完整篇</a></p>\n<hr>\n<p>一些额外的补充：\n如果你是用的是wordpress的话，相信你需要迁移一些文件，并且修改一些设置。\n你可以参看：\n<a href=\"https://chencool.com/228\">WORDPRESS全站开启HTTPS方法</a></p>\n<hr>\n<h1>年轻时犯的错误</h1>\n<p>最初作为一个连 nginx 是什么的年轻人，折腾这个小绿锁确实用了一些时间，吃过一些苦头…</p>\n<ol>\n<li>不知道什么是HTTPS</li>\n<li>不理解CA、证书、公钥和私钥之类的基础知识</li>\n<li>不懂nginx配置里都是什么意思</li>\n<li>不理解DNS服务商、CDN和一些常识\n…</li>\n</ol>\n<p>不过解决的方法归结起来就一句话？</p>\n<p>『不会就谷歌』</p>\n<hr>\n<p>一些你可能有用处的参考资料：</p>\n<ol>\n<li><a href=\"http://www.cnblogs.com/P_Chou/archive/2010/12/27/https-ssl-certification.html\">浅谈https\\ssl\\数字证书</a></li>\n<li><a href=\"https://imququ.com/search.html?s=%E5%85%B3%E4%BA%8E%E5%90%AF%E7%94%A8+HTTPS+%E7%9A%84%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB\">关于启用 HTTPS 的经验分享</a></li>\n<li><a href=\"https://www.zhihu.com/question/29620953\">SSL的公钥、私钥、证书都有些啥后缀？</a></li>\n</ol>\n<hr>\n<p>此片博文是我自己的经验总结，难免有所缺漏和错误，敬请指正，在此先行谢过。</p>","frontmatter":{"title":"启用 HTTPS 札记","date":"2016-08-11","description":"本文主要讲述我对 HTTPS 的了解的一些过程，包括如何给网站上 HTTPS...","excerpt":null}},"previous":null,"next":{"fields":{"slug":"lets-using-https-2"},"frontmatter":{"title":"启用 HTTPS 札记（续）"}}},"pageContext":{"id":"4d27c5a0-46b4-5941-ba1d-a2235a024afb","previousPostId":null,"nextPostId":"03b53896-89f8-5f11-9265-8165c0c155fe"}},"staticQueryHashes":["2082311839","2355076697","959449634"],"slicesMap":{}}