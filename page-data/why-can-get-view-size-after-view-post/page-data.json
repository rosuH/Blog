{"componentChunkName":"component---src-templates-blog-post-js","path":"/why-can-get-view-size-after-view-post/","result":{"data":{"site":{"siteMetadata":{"title":"Blog.kt"}},"markdownRemark":{"id":"5920bcd7-07b6-5eb5-97fa-30b55956cf66","excerpt":"并不是立刻在   中被调用的。如果当前 View 还没有依附到一个 Window 上，那么这个消息将会先保存在 View 中，直到方法被调用时才会把消息加到 Handler 队列中。 下面我们来一步步捋清这个过程。 View.postDelay() 这里判断了是否为空，如果是那么将消息先存放到 View…","html":"<p><code class=\"language-text\">View.postDelay()</code>并不是立刻在 <code class=\"language-text\">Handler</code>  中被调用的。如果当前 View 还没有依附到一个 Window 上，那么这个消息将会先保存在 View 中，直到<code class=\"language-text\">dispatchAttachToWindow()</code>方法被调用时才会把消息加到 Handler 队列中。</p>\n<p>下面我们来一步步捋清这个过程。</p>\n<h2>View.postDelay()</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">postDelayed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> action<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> delayMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">AttachInfo</span> attachInfo <span class=\"token operator\">=</span> mAttachInfo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attachInfo <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> attachInfo<span class=\"token punctuation\">.</span>mHandler<span class=\"token punctuation\">.</span><span class=\"token function\">postDelayed</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> delayMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Postpone the runnable until we know on which thread it needs to run.</span>\n    <span class=\"token comment\">// Assume that the runnable will be successfully placed after attach.</span>\n    <span class=\"token function\">getRunQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">postDelayed</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> delayMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里判断了<code class=\"language-text\">attachInfo</code>是否为空，如果是那么将消息先存放到 View 自己的内部变量<code class=\"language-text\">mRunQueue(HandlerActionQueue)</code> 内，后者的类型为<code class=\"language-text\">HandlerActionQueue</code>。</p>\n<p><code class=\"language-text\">HandlerActionQueue</code> 这个类只是一个消息队列包装类，即便是执行消息的<code class=\"language-text\">executeActions(Handler handler)</code>方法，也是用外部传入的<code class=\"language-text\">handler</code>来执行的。此处先按下不表。</p>\n<h2>拿到 AttachInfo 的时机</h2>\n<p>为什么要根据<code class=\"language-text\">attachInfo</code>来决定是否执行呢？因为一个<code class=\"language-text\">View</code>必须要依附到一个 Window 上，由后者逐步调用到（<code class=\"language-text\">ViewRootImpl</code>）执行<code class=\"language-text\">measure</code>,<code class=\"language-text\">layout</code>和<code class=\"language-text\">onDraw</code>。而 AttchInfo 就是由 Window 传递给 View 的信息。</p>\n<p>这是从意义的层面去解读，我们接着从源码角度看看 Android 是如何保证 <code class=\"language-text\">attchinfo</code> 不为空后，View 就有意义的。</p>\n<p>当然，我们最先看 View 中的<code class=\"language-text\">attachInfo</code>是何时赋值的。</p>\n<p>无论是 Activity 或者 Dialog，他们都需要 Window 来承载 View 的显示。比如在 Activity 的<code class=\"language-text\">setContentView()</code>中，就如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@LayoutRes</span> <span class=\"token keyword\">int</span> layoutResID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>layoutResID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">initWindowDecorActionBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里拿到 window 然后把布局 ID 设置进去，而 Activity 的 window 是在 <code class=\"language-text\">attach</code>方法中拿到的：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ActivityThread</span> aThread<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Instrumentation</span> instr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IBinder</span> token<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ident<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Application</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Intent</span> intent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ActivityInfo</span> info<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">CharSequence</span> title<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Activity</span> parent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">NonConfigurationInstances</span> lastNonConfigurationInstances<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Configuration</span> config<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> referrer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IVoiceInteractor</span> voiceInteractor<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Window</span> window<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ActivityConfigCallback</span> activityConfigCallback<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">attachBaseContext</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mFragments<span class=\"token punctuation\">.</span><span class=\"token function\">attachHost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token comment\">/*parent*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mWindow <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PhoneWindow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">,</span> activityConfigCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mWindow<span class=\"token punctuation\">.</span><span class=\"token function\">setWindowControllerCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mWindow<span class=\"token punctuation\">.</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mWindow<span class=\"token punctuation\">.</span><span class=\"token function\">setOnWindowDismissedCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mWindow<span class=\"token punctuation\">.</span><span class=\"token function\">getLayoutInflater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPrivateFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    mWindow<span class=\"token punctuation\">.</span><span class=\"token function\">setWindowManager</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span><span class=\"token class-name\">WindowManager</span><span class=\"token punctuation\">)</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getSystemService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">.</span><span class=\"token constant\">WINDOW_SERVICE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                mToken<span class=\"token punctuation\">,</span> mComponent<span class=\"token punctuation\">.</span><span class=\"token function\">flattenToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>flags <span class=\"token operator\">&amp;</span> <span class=\"token class-name\">ActivityInfo</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FLAG_HARDWARE_ACCELERATED</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里窗口已经被创建出来并等待使用。</p>\n<p>在 Activity 的 <code class=\"language-text\">onResumne()</code> 阶段，Activity 中的 DecorView 和 Window 中的属性会被设置进 WindowManager，此时 DecorView 才被设置为可见。</p>\n<p><code class=\"language-text\">ActivityThread::handleResumeActivity()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleResumeActivity</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">IBinder</span> token<span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">boolean</span> finalStateRequest<span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">boolean</span> isForward<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">String</span> reason<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    r<span class=\"token punctuation\">.</span>activity<span class=\"token punctuation\">.</span>mVisibleFromServer <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    mNumVisibleActivities<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>activity<span class=\"token punctuation\">.</span>mVisibleFromClient<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        r<span class=\"token punctuation\">.</span>activity<span class=\"token punctuation\">.</span><span class=\"token function\">makeVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Activity::makeVisible()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">makeVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mWindowAdded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//  getWindowManager() 将从 Activity 的 mWindow.getWindowManager() 拿到 WindowManager</span>\n        <span class=\"token comment\">// 而后者是在 attach 中赋值的，看上面的代码哦</span>\n        <span class=\"token class-name\">ViewManager</span> wm <span class=\"token operator\">=</span> <span class=\"token function\">getWindowManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        wm<span class=\"token punctuation\">.</span><span class=\"token function\">addView</span><span class=\"token punctuation\">(</span>mDecor<span class=\"token punctuation\">,</span> <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mWindowAdded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    mDecor<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span><span class=\"token constant\">VISIBLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意这里的<code class=\"language-text\">wm.addView(mDecor, getWindow().getAttributes());</code>很明显是把<code class=\"language-text\">DecorView</code> 和 Activity 创建的 Window 添加到 <code class=\"language-text\">WindowManager</code> 中。而整个<code class=\"language-text\">getWindowManager()</code>返回的自然就是<code class=\"language-text\">Activity </code>中新建的<code class=\"language-text\">PhoneWindow</code>实例的<code class=\"language-text\">WindowManager</code>。</p>\n<p>回顾<code class=\"language-text\">attach</code>中的代码，你会发现赋值<code class=\"language-text\">WindowManager</code>的语句：</p>\n<p><code class=\"language-text\">Activity::attach</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">mWindow<span class=\"token punctuation\">.</span><span class=\"token function\">setWindowManager</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span><span class=\"token class-name\">WindowManager</span><span class=\"token punctuation\">)</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getSystemService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">.</span><span class=\"token constant\">WINDOW_SERVICE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                mToken<span class=\"token punctuation\">,</span> mComponent<span class=\"token punctuation\">.</span><span class=\"token function\">flattenToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>flags <span class=\"token operator\">&amp;</span> <span class=\"token class-name\">ActivityInfo</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FLAG_HARDWARE_ACCELERATED</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>点进去看看：</p>\n<p><code class=\"language-text\">Window::setWindwManager</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setWindowManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WindowManager</span> wm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IBinder</span> appToken<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> appName<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">boolean</span> hardwareAccelerated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mAppToken <span class=\"token operator\">=</span> appToken<span class=\"token punctuation\">;</span>\n    mAppName <span class=\"token operator\">=</span> appName<span class=\"token punctuation\">;</span>\n    mHardwareAccelerated <span class=\"token operator\">=</span> hardwareAccelerated\n            <span class=\"token operator\">||</span> <span class=\"token class-name\">SystemProperties</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBoolean</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PROPERTY_HARDWARE_UI</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        wm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">WindowManager</span><span class=\"token punctuation\">)</span>mContext<span class=\"token punctuation\">.</span><span class=\"token function\">getSystemService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">.</span><span class=\"token constant\">WINDOW_SERVICE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 重点看看这个</span>\n    mWindowManager <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WindowManagerImpl</span><span class=\"token punctuation\">)</span>wm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createLocalWindowManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后一行代码中将返回一个<code class=\"language-text\">WindowManagerImpl</code>类，他是<code class=\"language-text\">WindowManager</code>的实现类。</p>\n<p>到了此处，我们再看看之前那句：</p>\n<p><code class=\"language-text\">Activity::makeVisiable</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">wm<span class=\"token punctuation\">.</span><span class=\"token function\">addView</span><span class=\"token punctuation\">(</span>mDecor<span class=\"token punctuation\">,</span> <span class=\"token function\">getWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里的<code class=\"language-text\">wm</code>实际上是一个<code class=\"language-text\">WindowManagerImpl</code>实例，接着调用的<code class=\"language-text\">addView()</code>方法是<code class=\"language-text\">WindowManagerImpl</code>内部的一个<code class=\"language-text\">mGlobal</code>（<code class=\"language-text\">WindowManagerGlobal</code>）去执行的。至于<code class=\"language-text\">WindowManagerGlobal</code>具体是个啥，我们先按下不表。</p>\n<p>我们追踪到这里的原因，只是找到最终实现<code class=\"language-text\">addView</code>的那个类，然后再来看看这个类里有做哪些有意思的事情：</p>\n<p><code class=\"language-text\">WindowManagerGlobal::addView()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 传进来的这个 View 就是 Activity 传过来的 decorView </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ViewGroup<span class=\"token punctuation\">.</span>LayoutParams</span> params<span class=\"token punctuation\">,</span><span class=\"token class-name\">Display</span> display<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Window</span> parentWindow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// 新建一个 ViewRootImpl 实例 </span>\n\troot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ViewRootImpl</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> display<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tview<span class=\"token punctuation\">.</span><span class=\"token function\">setLayoutParams</span><span class=\"token punctuation\">(</span>wparams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mViews<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tmRoots<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mParams<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>wparams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n    <span class=\"token comment\">// do this last because it fires off messages to start doing things</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 把 View 设置给 ViewRootImpl</span>\n        <span class=\"token comment\">// 执行这一步之后才真正开始 View 层操作</span>\n        root<span class=\"token punctuation\">.</span><span class=\"token function\">setView</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> wparams<span class=\"token punctuation\">,</span> panelParentView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// BadTokenException or InvalidDisplayException, clean up.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">removeViewLocked</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>   \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接着当然是看看<code class=\"language-text\">setView</code>做了什么了：</p>\n<p><code class=\"language-text\">ViewRootImpl::setView\t</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WindowManager<span class=\"token punctuation\">.</span>LayoutParams</span> attrs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">View</span> panelParentView<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// Schedule the first layout -before- adding to the window</span>\n    <span class=\"token comment\">// manager, to make sure we do the relayout before receiving</span>\n    <span class=\"token comment\">// any other events from the system.</span>\n    <span class=\"token function\">requestLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">requestLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mHandlingLayoutInLayoutRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">checkThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mLayoutRequested <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scheduleTraversals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">scheduleTraversals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mTraversalScheduled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 遍历标志位值为 true</span>\n        mTraversalScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        mTraversalBarrier <span class=\"token operator\">=</span> mHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getLooper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">postSyncBarrier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mChoreographer<span class=\"token punctuation\">.</span><span class=\"token function\">postCallback</span><span class=\"token punctuation\">(</span>\n                <span class=\"token class-name\">Choreographer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CALLBACK_TRAVERSAL</span><span class=\"token punctuation\">,</span> mTraversalRunnable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mUnbufferedInputDispatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">scheduleConsumeBatchedInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">notifyRendererOfFramePending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">pokeDrawLockIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>没想到吧…这里竟然先调用了<code class=\"language-text\">requestLayout()</code>方法。那么这个方法是做啥的呢？你跟着继续看，就可以在<code class=\"language-text\">scheduleTraversals()</code>方法中看到一个<code class=\"language-text\">mTraversalScheduled</code>被置为了<code class=\"language-text\">true</code>。而这个标志位被<code class=\"language-text\">doTraversal()</code>方法用来判断是否执行遍历。终于到了这个重要的方法了：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\t<span class=\"token class-name\">ViewRootImpl</span><span class=\"token operator\">::</span><span class=\"token function\">doTraversal</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">doTraversal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mTraversalScheduled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mTraversalScheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        mHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getLooper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeSyncBarrier</span><span class=\"token punctuation\">(</span>mTraversalBarrier<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mProfile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Debug</span><span class=\"token punctuation\">.</span><span class=\"token function\">startMethodTracing</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ViewAncestor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// 执行遍历</span>\n        <span class=\"token function\">performTraversals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mProfile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Debug</span><span class=\"token punctuation\">.</span><span class=\"token function\">stopMethodTracing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mProfile <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">ViewRootImpl</span><span class=\"token operator\">::</span><span class=\"token function\">performTraversals</span>\n<span class=\"token comment\">// 代码很长，我摘几句主题相关的拿出来</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">performTraversals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// 这个 mView 就是 setView 里面那个 DecorView    </span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> host <span class=\"token operator\">=</span> mView<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// ①</span>\n    <span class=\"token comment\">// 开始分发 AttachToWindow 消息，此时将会走  View.dispatchAttachedToWindow() </span>\n    <span class=\"token comment\">// 这时候 View.onAttachedToWindow() 将会被调用</span>\n    host<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchAttachedToWindow</span><span class=\"token punctuation\">(</span>mAttachInfo<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// Execute enqueued actions on every traversal in case a detached view enqueued an action</span>\n    <span class=\"token comment\">// 这句是执行 ViewRootImpl 自己的消息，不是 host 的消息    </span>\n    <span class=\"token function\">getRunQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeActions</span><span class=\"token punctuation\">(</span>mAttachInfo<span class=\"token punctuation\">.</span>mHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mStopped <span class=\"token operator\">||</span> mReportNextDraw<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \t<span class=\"token comment\">// ②</span>\n    \t<span class=\"token comment\">// 执行 Measure</span>\n    \t<span class=\"token function\">performMeasure</span><span class=\"token punctuation\">(</span>childWidthMeasureSpec<span class=\"token punctuation\">,</span> childHeightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>didLayout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 执行 Layout</span>\n        <span class=\"token function\">performLayout</span><span class=\"token punctuation\">(</span>lp<span class=\"token punctuation\">,</span> mWidth<span class=\"token punctuation\">,</span> mHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n     <span class=\"token comment\">// 执行 Draw</span>\n     <span class=\"token function\">performDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">View</span><span class=\"token operator\">::</span><span class=\"token function\">dispatchAttachedToWindow</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dispatchAttachedToWindow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AttachInfo</span> info<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> visibility<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token comment\">// ③</span>\n\t<span class=\"token comment\">// 使用 View.postDelay 的消息将在此被发送到 handler 中</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mRunQueue <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mRunQueue<span class=\"token punctuation\">.</span><span class=\"token function\">executeActions</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>mHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mRunQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 调用 onAttachedToWindow() 回调</span>\n    <span class=\"token function\">performCollectViewAttributes</span><span class=\"token punctuation\">(</span>mAttachInfo<span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">onAttachedToWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>或许到此你可能有疑问，明明先执行的 ① 处的代码，按照执行顺序，③ 处的会接着执行，也就是执行<code class=\"language-text\">View.postDely</code> 中的 <code class=\"language-text\">Runnable</code> ；最后才是 <code class=\"language-text\">Measure</code> 、<code class=\"language-text\">Layout</code> 和<code class=\"language-text\">Draw</code>。意味着<code class=\"language-text\">View.postDelay</code>并不一定能到宽高。难道这是面向运气编程？</p>\n<p>肯定不是啊😂…你注意看<code class=\"language-text\">dispatchAttachedToWindow</code>里的执行是<code class=\"language-text\">mRunQueue.executeActions(info.mHandler);</code>：</p>\n<p><code class=\"language-text\">HandlerActionQueue::executeActions()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">executeActions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Handler</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">HandlerAction</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> actions <span class=\"token operator\">=</span> mActions<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> count <span class=\"token operator\">=</span> mCount<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">final</span> <span class=\"token class-name\">HandlerAction</span> handlerAction <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 还是在 handler 上发送消息</span>\n            handler<span class=\"token punctuation\">.</span><span class=\"token function\">postDelayed</span><span class=\"token punctuation\">(</span>handlerAction<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">,</span> handlerAction<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        mActions <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        mCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个 <code class=\"language-text\">handler</code> 是主线程的<code class=\"language-text\">handler</code>，而主线程都没有把<code class=\"language-text\">performTraversals</code>执行完，哪能轮到你刚加进来的<code class=\"language-text\">View.postDelay</code>的消息呢…乖乖排队去吧。</p>\n<p>所以这里其实用到了异步操作，利用消息队列保证了<code class=\"language-text\">Measure</code>、<code class=\"language-text\">Layout</code>和<code class=\"language-text\">Draw</code>总在<code class=\"language-text\">dispatchAttachedToWindow()</code>后面执行。而<code class=\"language-text\">attachInfo</code>没有拿到的话，<code class=\"language-text\">View.postDelay</code>又是不会执行的。</p>\n<p><code class=\"language-text\">View::postDelay</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">postDelayed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> action<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> delayMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">AttachInfo</span> attachInfo <span class=\"token operator\">=</span> mAttachInfo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attachInfo <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> attachInfo<span class=\"token punctuation\">.</span>mHandler<span class=\"token punctuation\">.</span><span class=\"token function\">postDelayed</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> delayMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Postpone the runnable until we know on which thread it needs to run.</span>\n    <span class=\"token comment\">// Assume that the runnable will be successfully placed after attach.</span>\n    <span class=\"token function\">getRunQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">postDelayed</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> delayMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"为什么使用 View.postDelay() 就可以拿到宽高？","date":"2019-11-27","description":"本系列是笔者在实践过程中学习或复习到的一些 tips，为了避免忘记，特地记下来","excerpt":null}},"previous":{"fields":{"slug":"Manifesto-for-Minimalist-Software-Engineers-CN"},"frontmatter":{"title":"【翻译】极简主义工程师宣言"}},"next":{"fields":{"slug":"2019-12-reading-report"},"frontmatter":{"title":"2019-12 读书月报"}}},"pageContext":{"id":"5920bcd7-07b6-5eb5-97fa-30b55956cf66","previousPostId":"0d7d276c-d513-5bb3-a22a-011b4416a739","nextPostId":"28351538-2ad5-5cba-8765-e7691c65c989"}},"staticQueryHashes":["2082311839","2355076697","959449634"],"slicesMap":{}}