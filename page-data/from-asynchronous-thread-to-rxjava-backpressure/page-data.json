{"componentChunkName":"component---src-templates-blog-post-js","path":"/from-asynchronous-thread-to-rxjava-backpressure/","result":{"data":{"site":{"siteMetadata":{"title":"Blog.kt"}},"markdownRemark":{"id":"ed6e4661-52b8-50cd-9f3b-3a601988187e","excerpt":"1. RxJava…","html":"<h1>1. RxJava 中的异步控制</h1>\n<p>在以前也遇到了类似的场景，那时候还是再使用<code class=\"language-text\">AsyncTask</code>的时候。\n我们知道<code class=\"language-text\">AsyncTask</code>中有<code class=\"language-text\">doInBackground()</code>方法是一个子线程的异步方法。我们一般在里面执行耗时操作。\n但是我们会在<code class=\"language-text\">doInBackground()</code>中执行一个耗时的异步操作吗？看看下面的例子</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">doInBackground</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> urls<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">loadImageFromNetwork</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> targetObej<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>    </code></pre></div>\n<p>这里的示例中，我们调用<code class=\"language-text\">loadImageFromNetwork()</code>方法，将第一个参数中的图片下载下来，然后填充到<code class=\"language-text\">targetObjet</code>这个对象中去。\n但是这里调用的实际上是一个异步操作，程序调用了<code class=\"language-text\">loadImageFromNetwork()</code>就顺序执行了，返回了一个<code class=\"language-text\">true</code>值。\n这样的话再加载情况未知的情况下，程序逻辑已经继续执行下去了。</p>\n<p>如果只是使用<code class=\"language-text\">RxJava</code>来控制业务逻辑的话，那么异步线程里再开一个子线程的问题也会遇到同样问题呀：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @author rosu on 2018/10/27\n * 这个类用于展示 Rxjava 中异步操作中继续调用异步方法的情况\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlatMapWithChildProcess</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Observable</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObservableOnSubscribe</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> emitter <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Create1 ===>>> 创建并发射事件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前线程====>>> 1\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    emitter<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObservableSource</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> integer <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前线程====>>> 2\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">hardWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"顺序执行了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onSubscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Disposable</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onSubscribe =======>>> 开始订阅事件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> integer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onNext ======>>> \"</span> <span class=\"token operator\">+</span> integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onComplete ========>>> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hardWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前线程====>>> 3\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"睡眠完成的子线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输出为：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">onSubscribe <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> 开始订阅事件\nCreate1 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> 创建并发射事件\n当前线程<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> 1main\n当前线程<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> 2main\n当前线程<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> 3Thread-0\n顺序执行了\nonNext <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">101</span>\n睡眠完成的子线程</code></pre></div>\n<p>虽然例子看起来有点长，但内容不多。我们只是尝试在<code class=\"language-text\">flatMap()</code>调用了<code class=\"language-text\">hardWork()方法</code>，该方法中中起了一个耗时子线程。\n看到输出的结果也在我们的意料之中，原有的工作逻辑在调用了<code class=\"language-text\">hardWork()</code>之后就继续执行了，因为他无法得知那个方法是个异步的方法，也无法获得该方法的执行状态。</p>\n<p>例子比较简单，在实际的工作中我们可能会遇到一些情况，考虑这样一个例子：</p>\n<ol>\n<li>利用 RxJava 循环发射一些事件，常见是用<code class=\"language-text\">fromArray()</code>或<code class=\"language-text\">intervalRange()</code>这样的方法\n<ul>\n<li>此处我们发射一个<code class=\"language-text\">url</code>链接数组的元素</li>\n</ul>\n</li>\n<li>我们利用了 RxJava 本身的特性来控制业务逻辑，包括对每个事件的处理\n<ul>\n<li>此处，我们可能是对<code class=\"language-text\">url</code>做一些拼接或者判断有效性的工作</li>\n</ul>\n</li>\n<li>之后我们需要利用发射的事件做耗时操作\n<ul>\n<li>此处，我们是利用<code class=\"language-text\">url</code>来下载文件，假设调用了<code class=\"language-text\">download(url:Int)</code>方法</li>\n</ul>\n</li>\n<li>最后在<code class=\"language-text\">onComplete()</code>方法中完成视图操作</li>\n</ol>\n<p>这看起来是非常正常的业务逻辑，唯一值得注意的地方应该是耗时操作这个地方。我们先来看看例子的简易代码示例：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlatMapWithChildProcess</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Observable</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">fromArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObservableSource</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> integer <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">download</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onSubscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Disposable</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onSubscribe =======>>> 开始订阅事件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> integer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onNext ======>>> \"</span> <span class=\"token operator\">+</span> integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onComplete ========>>> RxJava 事件完成了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">UpdateUI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接到工作 ===>>> \"</span> <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"完成工作 ===>>> \"</span> <span class=\"token operator\">+</span> pos <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n 时间：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看一下输出：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">onSubscribe <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> 开始订阅事件\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span>\nonNext <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span>\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span>\nonNext <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span>\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span>\nonNext <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span>\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">4</span>\nonNext <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">4</span>\nonNext <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">5</span>\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">5</span>\nonNext <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">6</span>\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">6</span>\nonComplete <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> RxJava 事件完成了\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span>\n 时间：1543916254101\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">4</span>\n 时间：1543916254103\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">6</span>\n 时间：1543916254103\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span>\n 时间：1543916254103\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span>\n 时间：1543916254103\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">5</span>\n 时间：1543916254103</code></pre></div>\n<p>这里可以看到我们耗时操作还没做完，<code class=\"language-text\">RxJava</code>就已经回调了<code class=\"language-text\">onComplete()</code>了。所以这显然是不行的。</p>\n<h1>2. Flowable 能拯救这段代码吗？</h1>\n<p>众所周知…RxJava2 带来了<code class=\"language-text\">Flowable</code>这个新的观察者。又一个众所周知，<code class=\"language-text\">Flowable</code>是一个带有背压控制的观察者。\n那么背压控制，能解决这个问题吗？</p>\n<h2>2.1 Flowable 的背压误区？FlatMap 初探</h2>\n<p>于是我随手写了这段代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlowableWithBackPressure</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Flowable</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">fromArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Publisher</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> integer <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">download</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Flowable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>integer <span class=\"token operator\">-></span> integer <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowableSubscriber</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onSubscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subscription</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        \n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> integer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RxJava =======>>> onNext\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RxJava =======>>> 时间完成了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接到工作 ===>>> \"</span> <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"完成工作 ===>>> \"</span> <span class=\"token operator\">+</span> pos <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n 时间：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>看一下输出：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span>\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span>\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span>\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">4</span>\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">5</span>\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span>\n 时间：1543918837921\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span>\n 时间：1543918837924\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">4</span>\n 时间：1543918837924\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span>\n 时间：1543918837924\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">5</span>\n 时间：1543918837926</code></pre></div>\n<p>咦？貌似有什么地方出了问题啊。按照我<del>们</del>的平时认知，没有调用<code class=\"language-text\">Subscription.request()</code>，就不会发射事件才对啊。\n为啥这里还是调用了呢？当然熟悉的人一下子就看出来了。\n问题出在与<code class=\"language-text\">flatmap()</code>方法。</p>\n<p>实际上对于<code class=\"language-text\">flatMap()</code>之类的方法，是将原来的事件流转换为新的类型的事件流。问题就在这里了。\n转换的步骤，根据文档的说明是，<code class=\"language-text\">flatMap()</code>会将每个事件重新包装，最后再将所有事件合并发射。这样的话，实际上就是又构造了一个新的事件发射器，也就是一个新的『上游』</p>\n<h3>事件的『上游』和『下游』</h3>\n<p>我之前粗浅的认知里，以为第一个发射的源头是上游，其他都是下游。实际上『上下游』是一个相对的概念，比如这里的<code class=\"language-text\">flatMap()</code>，他重新包装了事件并重新发射了，他就是一个新的『上游』。这样的话，肯定所有事件不需要<code class=\"language-text\">request()</code>就可以直接发射到这个<code class=\"language-text\">flatMap()</code>方法里面了。</p>\n<h2>2.2 Flowable 和 背压控制</h2>\n<p>我们了解了『上下游』概念之后，其实横在我们面前的是，如何<strong>正确地</strong>动态控制事件发射呢？\n众所周知，Flowable 带来的背压控制的概念。我们前面也提到了通过<code class=\"language-text\">Subscription.request()</code>来控制上游发射。\n但是类似 2.1 中举的例子，在上游你是无法控制的。而且我们又要利用<code class=\"language-text\">RxJava</code>来控制业务逻辑，也就是对每个链接进行处理。\n这样的话，实际上我们只能在下游动态拉取才行。动态拉取就是<code class=\"language-text\">Subscription.request()</code>啊？\n那该怎么做呢？\n其实很简单，我们把耗时操作放在<code class=\"language-text\">onNext()</code>里就行了：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlowableWithBackPressure</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Subscription</span> mSubscription<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Flowable</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">fromArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>integer <span class=\"token operator\">-></span> integer <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowableSubscriber</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onSubscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subscription</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        mSubscription <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n                        mSubscription<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> integer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onNext() =======>>> 调用 download() 方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">download</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RxJava =======>>> 时间完成了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接到工作 ===>>> \"</span> <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"完成工作 ===>>> \"</span> <span class=\"token operator\">+</span> pos <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n 时间：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n 准备拉取\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mSubscription<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到，任务执行到<code class=\"language-text\">onNext()</code>方法，然后我们在里面调用了一个异步的耗时操作，等到耗时操作完成之后，采取拉取下一个事件发射。</p>\n<p>这是输出结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> 调用 <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> <span class=\"token number\">21</span>\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> <span class=\"token number\">21</span>\n 时间：<span class=\"token number\">1543983837259</span>\n 准备拉取\n<span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> 调用 <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> <span class=\"token number\">22</span>\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> <span class=\"token number\">22</span>\n 时间：<span class=\"token number\">1543983840264</span>\n 准备拉取\n<span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> 调用 <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> <span class=\"token number\">23</span>\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> <span class=\"token number\">23</span>\n 时间：<span class=\"token number\">1543983843269</span>\n 准备拉取\n<span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> 调用 <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> <span class=\"token number\">24</span>\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> <span class=\"token number\">24</span>\n 时间：<span class=\"token number\">1543983846275</span>\n 准备拉取\n<span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> 调用 <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法\n<span class=\"token class-name\">RxJava</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> 时间完成了\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> <span class=\"token number\">25</span>\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>>></span> <span class=\"token number\">25</span>\n 时间：<span class=\"token number\">1543983849278</span>\n 准备拉取</code></pre></div>\n<p>这样我们就完成了原来的目标，既用了<code class=\"language-text\">RxJava</code>控制业务逻辑，又在其中做了耗时操作并动态拉取事件，也就是背压控制。\n如果耗时操作并不是业务最下游，那么我们可以使用<code class=\"language-text\">doOnNext()</code>方法来达到同样的效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlowableWithBackPressure</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Subscription</span> mSubscription<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Flowable</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">fromArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>integer <span class=\"token operator\">-></span> integer <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">doOnNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> integer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doOnNext() =======>>> 调用 download() 方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">download</span><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowableSubscriber</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onSubscribe</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subscription</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        mSubscription <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n                        mSubscription<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> integer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onNext()2 =======>>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RxJava =======>>> 时间完成了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接到工作 ===>>> \"</span> <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"完成工作 ===>>> \"</span> <span class=\"token operator\">+</span> pos <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n 时间：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n 准备拉取\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mSubscription<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这是输出：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">doOnNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> 调用 download<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">21</span>\nonNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span>\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">21</span>\n 时间：1543984443387\n 准备拉取\ndoOnNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> 调用 download<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法\nonNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span>\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">22</span>\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">22</span>\n 时间：1543984446390\n 准备拉取\ndoOnNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> 调用 download<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法\nonNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span>\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">23</span>\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">23</span>\n 时间：1543984449396\n 准备拉取\ndoOnNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> 调用 download<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法\nonNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span>\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">24</span>\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">24</span>\n 时间：1543984452400\n 准备拉取\ndoOnNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> 调用 download<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 方法\nonNext<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span>\nRxJava <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> 事件完成了\n接到工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">25</span>\n完成工作 <span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">25</span>\n 时间：1543984455406\n 准备拉取\n</code></pre></div>\n<p><code class=\"language-text\">doOnNext()</code>可以注册一个回调，每当<code class=\"language-text\">Observable</code>的<code class=\"language-text\">onNext()</code>调用之前就会调用本方法。</p>\n<h1>3. 还有一点小问题</h1>\n<p>我们把耗时操作放在了<code class=\"language-text\">onNext()</code>中调用，也就是调用了<code class=\"language-text\">download()</code>方法。\n但是这样的还是有两个明显的问题：</p>\n<ol>\n<li>\n<p><code class=\"language-text\">download()</code>方法和 RxJava 流耦合了，因为用到了<code class=\"language-text\">Subscription.request()</code></p>\n</li>\n<li>\n<p>最后的一个事件依旧是还未<code class=\"language-text\">download()</code>完就调用了<code class=\"language-text\">onComplete()</code>，这是肯定的。因为最后一个事件之后，并不在需要<code class=\"language-text\">request()</code>了。所以事件流就结束了</p>\n<ul>\n<li>看一下上面的输出，先输出了<code class=\"language-text\">RxJava =======>>> 事件完成了</code></li>\n</ul>\n</li>\n</ol>\n<p>看到这两个问题，其实我们就该思考这种做法一开始就存在了问题。本身<code class=\"language-text\">RxJava</code>就良好地支持了异步回调控制的功能，如果非要在异步中再加上异步，造成的问题就是子线程状态难以控制。</p>\n<p>其实我们一开始就可以把<code class=\"language-text\">download()</code>方法\b写成同步方法，这样的话，利用<code class=\"language-text\">RxJava</code>本身对线程的控制能力，我们一样可以轻松地实现类似的业务需求。</p>","frontmatter":{"title":"从异步线程到 RxJava 的背压控制","date":"2018-09-28","description":null,"excerpt":null}},"previous":{"fields":{"slug":"/2018-09-27-tika-source-code-analysis/"},"frontmatter":{"title":"Tika 源码浅析"}},"next":{"fields":{"slug":"2018-summary"},"frontmatter":{"title":"2018 总结 & 2019 展望"}}},"pageContext":{"id":"ed6e4661-52b8-50cd-9f3b-3a601988187e","previousPostId":"dd6b87bd-85f0-587f-9fc3-fabeee6ddd7c","nextPostId":"613123ed-3c52-5c73-bbb6-8b4b00bbab05"}},"staticQueryHashes":["2082311839","2355076697","959449634"],"slicesMap":{}}