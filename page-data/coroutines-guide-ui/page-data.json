{"componentChunkName":"component---src-templates-blog-post-js","path":"/coroutines-guide-ui/","result":{"data":{"site":{"siteMetadata":{"title":"Blog.kt"}},"markdownRemark":{"id":"e0f1a748-d16e-5a8d-99cb-ac62e749c194","excerpt":"原文链接：https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/coroutines-guide-ui.md#basic-ui-coroutines 原文开源协议：https://github.com/Kotlin/kotlinx.coroutines…","html":"<blockquote>\n<p>原文链接：<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/coroutines-guide-ui.md#basic-ui-coroutines\">https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/coroutines-guide-ui.md#basic-ui-coroutines</a></p>\n<p>原文开源协议：<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/LICENSE.txt\">https://github.com/Kotlin/kotlinx.coroutines/blob/master/LICENSE.txt</a></p>\n</blockquote>\n<p>本指南假设您已经对协程这个概念有了基础的理解，如果您不了解，可以看看 <a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/coroutines-guide.md\">Guide to kotlin.coroutines</a>，它会给出一些协程在 UI 编程中应用的示例。</p>\n<p>所有 UI 应用程序库都有一个普遍的问题：他们的 UI 均受限于一个主线程中，所有的 UI 更新操作都必须发生在这个特定的线程中。对于此类应用使用协程，这意味您必须有一个合适的协程调度器，将协程的执行操作限制在那个特定的 UI 线程中。</p>\n<p>对于此，<code class=\"language-text\">kotlin.coroutine</code>有三个模块，他们为不同的 UI 应用程序库提供协程上下文。</p>\n<ul>\n<li><a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-android\">kotlinx-coroutines-android</a> — <code class=\"language-text\">Dispatchers.Main</code> Android 应用程序上下文</li>\n<li><a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-javafx\">kotlinx-coroutines-javafx</a> — <code class=\"language-text\">Dispatcher.JavaFx</code> JavaFx UI 应用程序上下文</li>\n<li><a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-swing\">kotlinx-coroutines-swing</a> — <code class=\"language-text\">Dispatcher.Swing</code> Swing UI 应用程序上下文</li>\n</ul>\n<p><code class=\"language-text\">kotlin-coroutines-core</code>库里的<code class=\"language-text\">Dispatcher.Main</code>提供了可用的 UI 分发器实现，而<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html\"><code class=\"language-text\">ServiceLoader</code></a> API 会自动发现并加载正确的实现（Android，JavaFx 或 Swing）。举个例子，如果您正在编写 JavaFx 应用程序，您可以使用<code class=\"language-text\">Dispatcher.Main</code>或<code class=\"language-text\">Dispatcher.JavaFx</code>扩展，他们是同一个对象。</p>\n<p>本指南同时涵盖了所有的 UI 库，因为每个模块只包含一个长度为几页的对象定义。您可以使用其中任何一个作为示例，为您喜欢的 UI 库编写相应的上下文对象，即便它未被本文写出来。</p>\n<h2>目录</h2>\n<ul>\n<li>设置\n<ul>\n<li><a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/coroutines-guide-ui.md#javafx\">JavaFx</a></li>\n<li><a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/coroutines-guide-ui.md#android\">Android</a></li>\n</ul>\n</li>\n<li>基础 UI 协程\n<ul>\n<li>启动 UI 协程</li>\n<li>取消 UI 协程</li>\n</ul>\n</li>\n<li>在 UI Context 中使用 actors\n<ul>\n<li>扩展协程</li>\n<li>最多仅有一个协程 job</li>\n<li>事件合并</li>\n</ul>\n</li>\n<li>阻塞操作\n<ul>\n<li>UI 卡顿问题</li>\n<li>结构化并发、生命周期和协程亲子继承</li>\n<li>阻塞操作</li>\n</ul>\n</li>\n<li>进阶提示\n<ul>\n<li>不使用分发器在 UI 事件控制器中启动协程</li>\n</ul>\n</li>\n</ul>\n<h2>设置</h2>\n<p>本指南中可运行的例子将使用 JavaFx 实现。这么做的好处是，所有的示例可以直接在任何操作需要上运行而不需要安装任何模拟器或类似的东西，并且他们是完全独立的。</p>\n<h3>JavaFx</h3>\n<p>这个基础的 JavaFx 示例程序由一个名为<code class=\"language-text\">hello</code>并使用<code class=\"language-text\">Hello World!</code>进行初始化的文本标签以及一个名为<code class=\"language-text\">fab</code>的桃红色的位于右下角的原型按钮组成。</p>\n<p><img src=\"https://i.loli.net/2019/01/09/5c34cb074b9de.png\" alt=\"ui-example-javafx\"></p>\n<p>JavaFx 的 <code class=\"language-text\">start</code>函数将会调用<code class=\"language-text\">setup</code>函数，并将<code class=\"language-text\">hello</code>和<code class=\"language-text\">fab</code>这两个节点的引用作为参数传递给 <code class=\"language-text\">setup</code> 函数。<code class=\"language-text\">setup</code> 函数是本指南中存放各种代码的地方：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>hello<span class=\"token operator\">:</span>Text<span class=\"token punctuation\">,</span> fab<span class=\"token operator\">:</span> Circle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 占个位</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>点击<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-javafx/test/guide/example-ui-basic-01.kt\">此处</a>查看完整代码</p>\n</blockquote>\n<p>您可以从 GitHub <code class=\"language-text\">clone</code>  <a href=\"https://github.com/Kotlin/kotlinx.coroutines\">kotlinx.coroutines</a> 项目到您本地，然后用 IDEA 打开。本指南的所有例子都在 <a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-javafx\"><code class=\"language-text\">ui/kotlinx-coroutines-javafx</code></a> 模块的 <code class=\"language-text\">test</code>文件夹中。这样您便可以运行并观察每一个例子的运行情况以及修改项目来进行实验。</p>\n<h2>Android</h2>\n<p>跟着 <a href=\"https://kotlinlang.org/docs/tutorials/kotlin-android.html\">Getting Started With Android and Kotlin</a> 这份指南，在 Android Studio 中创建 Kotlin 项目。我们也推荐您使用 <a href=\"https://kotlinlang.org/docs/tutorials/android-plugin.html\">Kotlin Android Extensions</a>  中的扩展特性。</p>\n<p>在 Android Studio 2.3 中，您会得到下面的类似的应用程序界面：</p>\n<p><img src=\"https://i.loli.net/2019/01/09/5c34cb1ef0bda.png\" alt=\"ui-example-android\"></p>\n<p>到<code class=\"language-text\">context_main.xml</code>文件中，为您的<code class=\"language-text\">TextView</code>分配<code class=\"language-text\">hello</code>的资源 ID，然后使用<code class=\"language-text\">Hello World!</code>来初始化它。</p>\n<p>那个桃红色的浮动按钮资源  ID 是<code class=\"language-text\">fab</code> 。</p>\n<p>在<code class=\"language-text\">MainActivity.kt</code>中，移除掉<code class=\"language-text\">fab.setOnclickListener{...}</code>，接着在<code class=\"language-text\">onCreate()</code>方法的最后一行添加一行<code class=\"language-text\">setup(hello, fab)</code>来调用它。</p>\n<p>然后在<code class=\"language-text\">MainActivity.kt</code>文件的尾部，给出<code class=\"language-text\">setup()</code>函数的实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> TextView<span class=\"token punctuation\">,</span> fab<span class=\"token operator\">:</span> FloatingActionButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 占位</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在您<code class=\"language-text\">app/build.gradle</code> 的<code class=\"language-text\">dependecies{...}</code>块中添加依赖：</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.0\"</code></pre></div>\n<p>Android 的示例存放在  <a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-android/example-app\"><code class=\"language-text\">ui/kotlinx-coroutines-android/example-app</code></a> ，您可以<code class=\"language-text\">clone</code>下来运行。</p>\n<h1>基础 UI 协程</h1>\n<p>这个小节将展示协程在 UI 应用程序中的基础使用。</p>\n<h2>启动 UI 协程</h2>\n<p><code class=\"language-text\">kotlinx-coroutines-javafx</code> 模块包含了<a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-javafx/kotlinx.coroutines.javafx/kotlinx.coroutines.-dispatchers/-java-fx.html\">Dispatchers.JavaFx</a> 分发器，该分发器分配协程操作给 JavaFx 应用线程。</p>\n<p>我们将之导入并用<code class=\"language-text\">Main</code>作为其别名，以便所有示例都可以轻松地移植到 Android 上：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>javafx<span class=\"token punctuation\">.</span>JavaFx <span class=\"token keyword\">as</span> Main</code></pre></div>\n<p>主 UI 线程的协程可以在 UI 线程上执行任何更新 UI 的操作，并且可以不阻塞主线程地挂起（suspend）操作。举个例子，我们可以编写命令式代码（imperative style）来执行动画。下面的代码将使用 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html\">launch</a> 协程构造器，从 10 到 1 进行倒数，每隔 2 秒倒数一次并更新文本。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>hello<span class=\"token operator\">:</span> Text<span class=\"token punctuation\">,</span> fab<span class=\"token operator\">:</span> Circle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    GlobalScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// launch coroutine in the main thread</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">10</span> downTo <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// countdown from 10 to 1 </span>\n            hello<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Countdown </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">i</span></span><span class=\"token string\"> ...\"</span></span> <span class=\"token comment\">// update text</span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// wait half a second</span>\n        <span class=\"token punctuation\">}</span>\n        hello<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Done!\"</span></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>您可以<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-javafx/test/guide/example-ui-basic-02.kt\">在此</a>获取完整的代码</p>\n</blockquote>\n<p>那么，上面究竟发生了什么呢？因为我们在 UI 线程启动（launching）了协程，所以我们可以在该协程内自由地更新 UI 的同时还可以调用挂起函数（suspend functions），比如  <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html\">delay</a> 。当 <code class=\"language-text\">delay</code> 在等待时（waits），UI 并不会卡住（frozen），因为 <code class=\"language-text\">delay</code> 并不会阻塞 UI 线程 —— 这就是协程的挂起。</p>\n<blockquote>\n<p>相应的 Android 应用代码是一样的。您只需要复制<code class=\"language-text\">setup</code>函数内的代码到 Android 项目中的对应函数中即可</p>\n</blockquote>\n<h2>取消 UI 协程</h2>\n<p>当我们想要停止一个协程的时候，我们可以持有一个由 <code class=\"language-text\">launch</code>函数返回的 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html\">Job</a> 对象并利用它来取消（cancel）。</p>\n<p>让我们通过点击桃红色的按钮来停止协程：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>hello<span class=\"token operator\">:</span> Text<span class=\"token punctuation\">,</span> fab<span class=\"token operator\">:</span> Circle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> job <span class=\"token operator\">=</span> GlobalScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// launch coroutine in the main thread</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">10</span> downTo <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// countdown from 10 to 1 </span>\n            hello<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Countdown </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">i</span></span><span class=\"token string\"> ...\"</span></span> <span class=\"token comment\">// update text</span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// wait half a second</span>\n        <span class=\"token punctuation\">}</span>\n        hello<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Done!\"</span></span>\n    <span class=\"token punctuation\">}</span>\n    fab<span class=\"token punctuation\">.</span>onMouseClicked <span class=\"token operator\">=</span> EventHandler <span class=\"token punctuation\">{</span> job<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// cancel coroutine on click</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>您可以在<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-javafx/test/guide/example-ui-basic-03.kt\">这里</a>获取完整代码</p>\n</blockquote>\n<p>现在实现的效果是：当倒数正在进行时，点击圆形按钮将会停止倒数。请注意，<a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html\">Job.cancel</a> 方法线程安全并且非阻塞。它只是给协程发送取消信号，而不会等待协程真正终止。</p>\n<p><a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html\">Job.cancel</a> 该方法可以在任何地方调用，而如果在已经取消或者完成的协程上，该方法不做什么事情。</p>\n<blockquote>\n<p>相应的 Android 代码示例如下</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">fab<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">{</span>job<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h1>在 UI Context 中使用 actors</h1>\n<p>在一节中，我们将会展示 UI 应用程序是如何在其 UI 上下文（Context）中使用 actors ，以确保启动的协程数量不会无限增长。</p>\n<h2>协程扩展</h2>\n<p>我们的目标是编写一个名为<code class=\"language-text\">onClick</code>的扩展协程构建器函数，这样每当圆形按钮被点击的时候，都会执行一个倒数动画：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>hello<span class=\"token operator\">:</span> Text<span class=\"token punctuation\">,</span> fab<span class=\"token operator\">:</span> Circle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fab<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// start coroutine when the circle is clicked</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">10</span> downTo <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// countdown from 10 to 1 </span>\n            hello<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Countdown </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">i</span></span><span class=\"token string\"> ...\"</span></span> <span class=\"token comment\">// update text</span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// wait half a second</span>\n        <span class=\"token punctuation\">}</span>\n        hello<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"Done!\"</span></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们的第一个<code class=\"language-text\">onClick</code>版本：在每一个鼠标事件上启动一个新的协程，并将之对应的鼠标事件传递给动作使用者：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Node<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>action<span class=\"token operator\">:</span> <span class=\"token keyword\">suspend</span> <span class=\"token punctuation\">(</span>MouseEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    onMouseClicked <span class=\"token operator\">=</span> EventHandler <span class=\"token punctuation\">{</span> event <span class=\"token operator\">-></span>\n        GlobalScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n            <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>您可以<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-javafx/test/guide/example-ui-actor-01.kt\">在此</a>获取完整的代码</p>\n</blockquote>\n<p>请注意，每当圆形按钮被点击，它便会启动一个新的协程，这些新协程会竞争地更新文本。这看起来并不好，我们会在后面解决这个问题。</p>\n<blockquote>\n<p>在 Android 中，可以为 <code class=\"language-text\">View</code> 类编写对应的扩展函数代码，所以上面 <code class=\"language-text\">setup</code> 函数中的代码可以不需要另作更改就直接使用。Android 中没有 <code class=\"language-text\">MouseEvent</code>，所以此处略过</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> View<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>action<span class=\"token operator\">:</span> <span class=\"token keyword\">suspend</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    setOnClickListener <span class=\"token punctuation\">{</span> \n        GlobalScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>最多只有一个协程 Job</h2>\n<p>我们可以在开启一个新的协程之前，取消掉一个正在运行（active）的 Job，以此来确保最多只有一个协程在执行倒计时工作。然而，通常来说这并不是一个最好的解决方法。<a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html\">cancel</a> 函数仅仅发送一个取消信号去中断一个协程。取消的操作是合作性的，在现在的版本中，当协程在做一件不可取消的或类似的事件时，它是可以忽略取消信号的。</p>\n<p>一个更好的解决方法是使用一个 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/actor.html\">actor</a> 来确保协程不会同时进行。让我们修改<code class=\"language-text\">onClick</code>扩展实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Node<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>action<span class=\"token operator\">:</span> <span class=\"token keyword\">suspend</span> <span class=\"token punctuation\">(</span>MouseEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 启动一个 actor 来接管这个节点中的所有事件</span>\n    <span class=\"token keyword\">val</span> eventActor <span class=\"token operator\">=</span> GlobalScope<span class=\"token punctuation\">.</span>actor<span class=\"token operator\">&lt;</span>MouseEvent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>event <span class=\"token keyword\">in</span> channel<span class=\"token punctuation\">)</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token comment\">//传递事件给 action</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// install a listener to offer events to this actor</span>\n    onMouseClicked <span class=\"token operator\">=</span> EventHandler <span class=\"token punctuation\">{</span> event <span class=\"token operator\">-></span>\n        eventActor<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>您可以<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-javafx/test/guide/example-ui-actor-02.kt\">在此</a>获取完整代码</p>\n</blockquote>\n<p>整合 <code class=\"language-text\">actor</code> 协程和常规事件控制（event handler）的关键点，在于 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/index.html\">SendChannel</a> 中有一个不中断（no wait）的  <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/offer.html\">offer</a>  函数。如果发送消息这个行为可行的话，<a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/offer.html\">offer</a>  函数会立即发送一个元素给 <code class=\"language-text\">actor</code> ，否则该元素将会被丢弃。<code class=\"language-text\">offer</code> 函数会返回一个 <code class=\"language-text\">Boolean</code> 作为结果，不过在此该结果被我们忽略了。</p>\n<p>试着重复点击这个版本的代码中的圆形按钮。当倒数都动画正在执行时，该点击操作会被忽略掉。这是因为 <code class=\"language-text\">actor</code> 正忙于动画而没有从 channel 接受消息。默认情况下，一个 <code class=\"language-text\">actor</code> 的消息信箱（mailbox）是由 <code class=\"language-text\">RendezvousChannel</code>实现的，后者的 <code class=\"language-text\">offer</code>操作仅在 <code class=\"language-text\">receive</code> 活跃时有效。</p>\n<blockquote>\n<p>在 Android 中，<code class=\"language-text\">View</code> 被传递给 <code class=\"language-text\">OnClickListener</code>，所以我们把 <code class=\"language-text\">view</code> 当作信号（signal）传递给 <code class=\"language-text\">actor</code> 。对应的 <code class=\"language-text\">View</code> 类扩展如下：</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> View<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>action<span class=\"token operator\">:</span> <span class=\"token keyword\">suspend</span> <span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// launch one actor</span>\n    <span class=\"token keyword\">val</span> eventActor <span class=\"token operator\">=</span> GlobalScope<span class=\"token punctuation\">.</span>actor<span class=\"token operator\">&lt;</span>View<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>event <span class=\"token keyword\">in</span> channel<span class=\"token punctuation\">)</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// install a listener to activate this actor</span>\n    setOnClickListener <span class=\"token punctuation\">{</span> \n        eventActor<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>事件合并</h2>\n<p>有时候处理最新的事件比忽略掉它更合适。 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/actor.html\">actor</a> 协程构建器接受一个可选的 <code class=\"language-text\">capacity</code> 参数来控制用于消息信箱（mailbox）的 channel 的实现。所有有效的选项均在 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/index.html\"><code class=\"language-text\">Channel()</code></a> 工厂函数中有所阐述。</p>\n<p>让我们修改代码，传递 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/-c-o-n-f-l-a-t-e-d.html\">Channel.CONFLATED</a> 这个 capacity 参数来使用  <code class=\"language-text\">ConflatedChannel</code> 。只需要更改创建 actor 的那行代码即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Node<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span>action<span class=\"token operator\">:</span> <span class=\"token keyword\">suspend</span> <span class=\"token punctuation\">(</span>MouseEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// launch one actor to handle all events on this node</span>\n    <span class=\"token keyword\">val</span> eventActor <span class=\"token operator\">=</span> GlobalScope<span class=\"token punctuation\">.</span>actor<span class=\"token operator\">&lt;</span>MouseEvent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">,</span> capacity <span class=\"token operator\">=</span> Channel<span class=\"token punctuation\">.</span>CONFLATED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// &lt;--- Changed here</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>event <span class=\"token keyword\">in</span> channel<span class=\"token punctuation\">)</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token comment\">// pass event to action</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// install a listener to offer events to this actor</span>\n    onMouseClicked <span class=\"token operator\">=</span> EventHandler <span class=\"token punctuation\">{</span> event <span class=\"token operator\">-></span>\n        eventActor<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>您可以<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-javafx/test/guide/example-ui-actor-03.kt\">在此</a>获取完整的 JavaFx 代码。在 Android 上，您需要修改之前示例中的 <code class=\"language-text\">val eventActor = ...</code> 这一行。</p>\n</blockquote>\n<p>现在，如果动画正在进行时圆形按钮被点击了，动画将会在结束之后重新启动。仅会重启一次。当动画进行时，重复的点击操作将会被合并，而仅有最新的事件会被处理。</p>\n<p>这对于那些需要接收高频率事件流，并基于最新事件更新 UI 的 UI 应用程序而言，也是一种合乎需求的行为（ a desired behaviour ）。使用  <code class=\"language-text\">ConflatedChannel</code> 的协程可以避免由事件缓冲（buffering of events）带来的延迟。</p>\n<p>您可以试验不同的  <code class=\"language-text\">capacity</code>  参数来看看上面代码的效果和行为。设置 <code class=\"language-text\">capacity = Channel.UNLIMITED</code> 将创建一个 <code class=\"language-text\">LinkedListChannel</code> 实现的信箱，这会缓冲所有事件。在这种情况下，动画的执行次数和圆形按钮点击次数保持一致。</p>\n<h1>阻塞操作</h1>\n<p>这一小节将解释如何在 UI 协程中完成线程阻塞操作（thread-blocking operations）。</p>\n<h2>UI 卡顿问题</h2>\n<blockquote>\n<p>The problem of UI freezes</p>\n</blockquote>\n<p>如果所有 API 接口函数均以挂起函数（suspending functions）来实现那是最好不过的事情了，这样那些函数将永远不会阻塞调用它们的线程。然而，事实往往并非如此。比如，有时候您必须做一些消耗 CPU 的计算操作，或者只是需要调用第三方的 API 来访问网络，这些行为都会阻塞调用函数的线程。您无法在 UI 线程或是 UI 线程启动的协程直接做上述操作，因为那会直接阻塞 UI 线程从而导致 UI 界面卡顿。</p>\n<p>下面的例子将会展示这个问题。我们将使用 <code class=\"language-text\">onClick</code> 扩展和上一节中的 <em>UI 限制性事件合并 actor</em> 来处理 UI 线程的最后一次点击。</p>\n<p>举个例子，我们将进行 <a href=\"https://en.wikipedia.org/wiki/Fibonacci_number\">斐波那契数列</a> 的简单演算：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> \n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> x <span class=\"token keyword\">else</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>每当圆形按钮被点击，我们都会进行更大的斐波那契数的计算。为了让 UI 卡顿变得明显可见，将会有一个持续执行的快速的计数器动画，并在 UI 分发器（dispatcher）更新文本：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>hello<span class=\"token operator\">:</span> Text<span class=\"token punctuation\">,</span> fab<span class=\"token operator\">:</span> Circle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"none\"</span></span> <span class=\"token comment\">// the last result</span>\n    <span class=\"token comment\">// counting animation </span>\n    GlobalScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            hello<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\"><span class=\"token operator\">++</span>counter</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">result</span></span><span class=\"token string\">\"</span></span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// update the text every 100ms</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// compute the next fibonacci number of each click</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    fab<span class=\"token punctuation\">.</span><span class=\"token function\">onClick</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">=</span> <span class=\"token string-literal singleline\"><span class=\"token string\">\"fib(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">x</span></span><span class=\"token string\">) = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\"><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n        x<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>您可以在<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-javafx/test/guide/example-ui-blocking-01.kt\">这里</a>获取完整的 JavaFx 代码。您只需要复制 <code class=\"language-text\">fib</code> 函数及 <code class=\"language-text\">setup</code> 函数体内代码到您的 Android 项目即可</p>\n</blockquote>\n<p>试着点击例子中的圆形按钮。大概第在 30~40 次点击后，我们的计算将会变得缓慢，接着您会立刻看到 UI 卡顿，因为倒数动画在 UI 卡顿的时候停止了。</p>\n<h2>结构化并发、生命周期和协程亲子继承</h2>\n<p>一个典型的 UI 应用程序拥有许多生命周期元素。Windows、UI 控制、activities，views，fragments 以及其他可视化元素将会被创建和销毁。一个长时间运行的协程，在后台执行着诸如 IO 或计算操作，如果它持有 UI 元素的引用，那么可能导致 UI 元素生命周期过长，继而阻止那些已经销毁并且不再显示的 UI 树被 GC 收集和回收。</p>\n<p>一个自然的解决方法是将一个 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html\">Job</a>  对象关联到 UI 对象，后者拥有生命周期并在其上下文（Context）中创建协程。但是传递已关联的 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html\">Job</a> 对象给所有线程构造器容易出错，而且这个操作容易被遗忘。故此，<a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html\">CoroutineScope</a> 接口可以被 UI 所有者所实现，然后每一个在  <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html\">CoroutineScope</a> 上定义为扩展的协程构造器都将继承 UI 的 Job，而无需显式声明。为了简单起见，可以使用 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-main-scope.html\">MainScope()</a> 工厂方法。它会自动提供  <code class=\"language-text\">Dispatchers.Main</code> 及其父级 job 。</p>\n<p>举个例子，在 Android 应用程序中，一个 <code class=\"language-text\">Activity</code> 在 <em>created</em> 中被初始化，而当其不再被需要或者其内存必须被释放时，该对象被<em>销毁</em>（<em>destroyed</em>)。一个自然的解决方法是为一个 <code class=\"language-text\">Activity</code> 实例对象附加一个 <code class=\"language-text\">Job</code> 实例对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> ScopedAppActivity<span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> CoroutineScope <span class=\"token keyword\">by</span> <span class=\"token function\">MainScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// CoroutineScope.cancel</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在，继承 <code class=\"language-text\">ScopedAppActivity</code> 来让一个 activity 和一个 job 关联起来：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">ScopedAppActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    fun <span class=\"token function\">asyncShowData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> launch <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Is invoked in UI context with Activity's job as a parent</span>\n        <span class=\"token comment\">// actual implementation</span>\n    <span class=\"token punctuation\">}</span>\n    \n    suspend fun <span class=\"token function\">showIOData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        val deferred <span class=\"token operator\">=</span> <span class=\"token function\">async</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dispatchers</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IO</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// impl      </span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">withContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dispatchers<span class=\"token punctuation\">.</span>Main</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          val data <span class=\"token operator\">=</span> deferred<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token comment\">// Show data in UI</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>每个从<code class=\"language-text\">MainActivity</code>中启动（launched）的协程都将拥有它的 job 作为其父亲，当 activity 被销毁时，协程将会被立刻取消（canceled）。</p>\n<p>可以使用多种方法，来将 activtiy 的 scope 传递给它的 Views 及 Presenters：</p>\n<ul>\n<li><a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html\">coroutineScope</a> 构造器提供一个嵌套的 scope</li>\n<li>在 presenters 方法中接收一个  <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html\">CoroutineScope</a>  参数</li>\n<li>在 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html\">CoroutineScope</a> 中进行函数扩展（仅适用于顶级函数）</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> ActivityWithPresenters<span class=\"token operator\">:</span> <span class=\"token function\">ScopedAppActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> presenter <span class=\"token operator\">=</span> <span class=\"token function\">Presenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> presenter2 <span class=\"token operator\">=</span> <span class=\"token function\">ScopedPresenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> Presenter <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> coroutineScope <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Nested scope of outer activity</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>uiScope<span class=\"token operator\">:</span> CoroutineScope<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> uiScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Invoked in the uiScope</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">ScopedPresenter</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">:</span> CoroutineScope<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> CoroutineScope <span class=\"token keyword\">by</span> scope <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> launch <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Extension on ActivityWithPresenters's scope</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> CoroutineScope<span class=\"token punctuation\">.</span><span class=\"token function\">launchInIO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// Launched in the scope of the caller, but with IO dispatcher</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>jobs 间的亲子关系形成了层级结构。一个代表视图在后台执行工作的协程，可以进一步创建子协程。当父级 job 被取消的时候，整个协程树都将被取消。协程指南中的“<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/coroutine-context-and-dispatchers.md#children-of-a-coroutine\">子协程</a>”用一个例子阐述了这些用法。</p>\n<h2>阻塞操作</h2>\n<p>使用协程可以非常简单地解决 UI 线程上的阻塞操作。我们将把我们的“阻塞” <code class=\"language-text\">fib</code> 函数转换为挂起函数，然后通过使用 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/with-context.html\">withContext</a> 函数来将把后台运算部分的线程的执行上下文（execution context）转换为 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html\">Dispatchers.Default</a> 。 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html\">Dispatchers.Default</a> 由一个后台线程池（ background pool）实现。请注意，<code class=\"language-text\">fib</code>函数现在标有 <code class=\"language-text\">suspend</code> 修饰符。这表示无论它怎么被调用都会不会阻塞协程，而是在后台线程执行计算时，挂起它的操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token function\">withContext</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> x <span class=\"token keyword\">else</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>您可以在<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-javafx/test/guide/example-ui-blocking-02.kt\">这里</a> 获取完整代码。</p>\n</blockquote>\n<p>您可以运行上述代码然后确认在计算较大的斐波那契数时 UI 不会被卡住。然而，这段 <code class=\"language-text\">fib</code>计算代码速度稍慢，因为每一次都是通过 <code class=\"language-text\">withContext</code> 来递归调用的。这在练习中并不是什么大问题，因为  <code class=\"language-text\">withContext</code> 能够机智地检查该协程是否已经在所需的上下文中，然后避免过度分发（dispatching）协程到不同的线程。尽管如此，这仍是一种开销。它在原生代码（primitive code）上是可见的，并且它除了调用  <code class=\"language-text\">withContext</code>  之间提供整数以外，不做其他工作。对于一些实际性的代码， <code class=\"language-text\">withContext</code>  的开销不会很明显。</p>\n<p>尽管如此，这个特定实现的可在后台线程工作的 <code class=\"language-text\">fib</code> 函数也可以变得和没有使用挂起函数时一样快，只需要重命名原来的 <code class=\"language-text\">fib</code> 函数为 <code class=\"language-text\">fibBlocking</code> 然后定义一个用  <code class=\"language-text\">withContext</code>  包装在 <code class=\"language-text\">fibBlocking</code> 顶部的 <code class=\"language-text\">fib</code> 函数即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">suspend fun <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token function\">withContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dispatchers<span class=\"token punctuation\">.</span>Default</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fibBlocking</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nfun <span class=\"token function\">fibBlocking</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> x <span class=\"token keyword\">else</span> <span class=\"token function\">fibBlocking</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibBlocking</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>您可以在<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-javafx/test/guide/example-ui-blocking-03.kt\">这里</a> 获取完整代码。</p>\n</blockquote>\n<p>您现在可以享受全速（full-speed）的原生斐波那契数计算而不会阻塞 UI 线程了。我们仅仅需要 <code class=\"language-text\">withContext(Dispatchers.Default)</code> 而已。</p>\n<p>请记住，因为在我们代码中 <code class=\"language-text\">fib</code> 函数是被单个 actor 所调用的，故而在任何时间都最多只有一个并行运算。所以这份代码在资源利用上有着天然的限制性。它最多只能占用一个 CPU 核心。</p>\n<h1>进阶提示</h1>\n<p>这个小结覆盖了多种进阶提示。</p>\n<h2>不使用分发器在 UI 事件控制器中启动协程</h2>\n<p>让我们用下列 <code class=\"language-text\">setup</code> 函数中的代码来形象展示协程从 UI 中启动的执行步骤：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>hello<span class=\"token operator\">:</span> Text<span class=\"token punctuation\">,</span> fab<span class=\"token operator\">:</span> Circle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fab<span class=\"token punctuation\">.</span>onMouseClicked <span class=\"token operator\">=</span> EventHandler <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Before launch\"</span></span><span class=\"token punctuation\">)</span>\n        GlobalScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Inside coroutine\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"After delay\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> \n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"After launch\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>您可以在<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-javafx/test/guide/example-ui-advanced-01.kt\">这里</a>获取完整的  JavaFx  代码。</p>\n</blockquote>\n<p>当我们运行代码并点击桃红色的圆形按钮，控制台将会打印出如下信息：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Before launch\nAfter launch\nInside coroutine\nAfter delay</code></pre></div>\n<p>正如您所见，<a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html\">launch</a> 后的操作被立刻执行了，而发布到 UI 线程的协程则在其之后才执行。所有在  <code class=\"language-text\">kotlinx.coroutines</code> 的分发器都是如此实现的。为什么要这样呢？</p>\n<p>基本上，这是在 “JavaScript 风格”异步方法（异步操作总是被延迟给事件分发线程执行）和 “C# 风格”异步方法（异步操作在调用者线程遇到第一个挂起函数时被执行）之间的选择。尽管 C# 风格看起来更有效率，但是它最终建议诸如“如果您需要时请使用 <code class=\"language-text\">yield</code> …”的信息。这样是容易出错的。JavaScript 风格的方法更加一致，它也不要求编程人员去思考什么时候该或不该使用 <code class=\"language-text\">yield</code> 。</p>\n<p>然而，当协程从事件控制器（event handler）启动，并且没有其周围没有其它的代码，这中特殊情况下，此种额外的分派确实会带来额外的开销，并且没有其他的附加价值。在这样的情况下， <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html\">launch</a>、<a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html\">async</a> 和 <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/actor.html\">actor</a> 三种协程构造器均可以传递一个可选的  <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/index.html\">CoroutineStart</a> 参数来优化性能。传递  <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-u-n-d-i-s-p-a-t-c-h-e-d.html\">CoroutineStart.UNDISPATCHED</a> 参数将会实现：遇到首个挂在函数便立刻执行协程的效果。正如下面代码所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>hello<span class=\"token operator\">:</span> Text<span class=\"token punctuation\">,</span> fab<span class=\"token operator\">:</span> Circle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fab<span class=\"token punctuation\">.</span>onMouseClicked <span class=\"token operator\">=</span> EventHandler <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Before launch\"</span></span><span class=\"token punctuation\">)</span>\n        GlobalScope<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Dispatchers<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">,</span> CoroutineStart<span class=\"token punctuation\">.</span>UNDISPATCHED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// &lt;--- Notice this change</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"Inside coroutine\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>                            <span class=\"token comment\">// &lt;--- And this is where coroutine suspends      </span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"After delay\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"After launch\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>您可以<a href=\"https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/kotlinx-coroutines-javafx/test/guide/example-ui-advanced-02.kt\">在此</a>获取到完整的 JavaFx 代码。</p>\n</blockquote>\n<p>当点击时，下面的信息将会被打印出来，可以确认协程中的代码被立刻执行：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">Before launch\nInside coroutine\nAfter launch\nAfter delay</code></pre></div>","frontmatter":{"title":"【翻译】协程在 UI 编程中的使用指南","date":"2019-01-09","description":null,"excerpt":null}},"previous":{"fields":{"slug":"2018-summary"},"frontmatter":{"title":"2018 总结 & 2019 展望"}},"next":{"fields":{"slug":"web-view-ad-blocker"},"frontmatter":{"title":"WebView 广告拦截浅析"}}},"pageContext":{"id":"e0f1a748-d16e-5a8d-99cb-ac62e749c194","previousPostId":"613123ed-3c52-5c73-bbb6-8b4b00bbab05","nextPostId":"21a4177a-1edd-545c-a189-ea8d8eff63c7"}},"staticQueryHashes":["2082311839","2355076697","959449634"],"slicesMap":{}}