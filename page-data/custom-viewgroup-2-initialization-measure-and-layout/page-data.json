{"componentChunkName":"component---src-templates-blog-post-js","path":"/custom-viewgroup-2-initialization-measure-and-layout/","result":{"data":{"site":{"siteMetadata":{"title":"Blog.kt"}},"markdownRemark":{"id":"3fc39f7e-e9fa-503e-94e1-3922871fc8ec","excerpt":"首先说一下思路，自定义布局其实不难，核心点就是我们熟知的 measure 和 layout。这个和我们编写 XML 布局几乎是一致的，只是换了一种实现方式。如果我们用 Kotlin DSL 封装一下，可读性会大大提高。 我自己的实现流程一般为： 确定控件以及初始化 重写 measure…","html":"<p>首先说一下思路，自定义布局其实不难，核心点就是我们熟知的 measure 和 layout。这个和我们编写 XML 布局几乎是一致的，只是换了一种实现方式。如果我们用 Kotlin DSL 封装一下，可读性会大大提高。</p>\n<p>我自己的实现流程一般为：</p>\n<ol>\n<li>确定控件以及初始化</li>\n<li>重写 measure，为子控件测量尺寸，同时设置当前 ViewGroup 尺寸</li>\n<li>重写 layout</li>\n<li>根据业务内容重写其他方法或定制接口。比如<a href=\"https://github.com/rosuH/EasyWatermark/blob/732fb957ca47a58148ff42d6dc4db7c61af58e0c/app/src/main/java/me/rosuh/easywatermark/widget/LaunchView.kt#L347-L378\">触摸事件处理</a>、<a href=\"https://github.com/rosuH/EasyWatermark/blob/732fb957ca47a58148ff42d6dc4db7c61af58e0c/app/src/main/java/me/rosuh/easywatermark/widget/LaunchView.kt#L332-L345\">布局转换</a>等</li>\n</ol>\n<h2>1. 确定控件以及初始化</h2>\n<p>这一步说的是如何贴合业务确定子控件及其初始化时机。一般我们使用如下方式来声明一个子控件：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> ivPhoto<span class=\"token operator\">:</span> ImageView <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ImageView</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> android<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>Widget_ActionButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n        layoutParams <span class=\"token operator\">=</span>\n            <span class=\"token function\">MarginLayoutParams</span><span class=\"token punctuation\">(</span>\n                LayoutParams<span class=\"token punctuation\">.</span>WRAP_CONTENT<span class=\"token punctuation\">,</span>\n                LayoutParams<span class=\"token punctuation\">.</span>WRAP_CONTENT\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">setMargins</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">setImageResource</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_picker_image<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>这里使用 lazy 委托进行延迟初始化。是否延迟初始化视乎情况而定，如果你的子控件非常多，并且不是全都会在首次用到，那么建议使用 <code class=\"language-text\">lazy</code> 进行延迟初始化操作。但是如果作为 RecyclerView 的 item，我不建议使用 <code class=\"language-text\">lazy</code> 操作，这样在快速滑动的情况下可能会降低性能。\n<ul>\n<li>因为 <code class=\"language-text\">lazy</code> 内部使用 <code class=\"language-text\">synchronized</code> 关键字对 <code class=\"language-text\">get</code> 方法进行同步保护，所以在性能敏感场景，不如直接创建来得快。</li>\n<li>另一方面，RecyclerView 存在<a href=\"https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:recyclerview/recyclerview/src/main/java/androidx/recyclerview/widget/RecyclerView.java;l=6756-6761?q=RecyclerView.java\">回收机制</a>，在不恰当的时机 <code class=\"language-text\">addView</code> 可能导致不可预期的问题。（仅猜测，待确认）</li>\n</ul>\n</li>\n<li><code class=\"language-text\">ImageView(context, null, 0, android.R.style.Widget_ActionButton)</code> 这个构造函数允许我们传入自定义的 <code class=\"language-text\">Style</code>，这有助于我们复用控件的样式。</li>\n<li>此处没有加入 <code class=\"language-text\">addView()</code> 的调用，表示我们将在使用到的时候手动进行 <code class=\"language-text\">addView</code> ，而不是现在。</li>\n</ol>\n<p>如果我们的场景不适合，或者不需要延迟初始化，那么一种更加常见的声明方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> ivPhoto<span class=\"token operator\">:</span> ImageView <span class=\"token operator\">=</span>\n    <span class=\"token function\">ImageView</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> android<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>Widget_ActionButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n        layoutParams <span class=\"token operator\">=</span>\n            <span class=\"token function\">MarginLayoutParams</span><span class=\"token punctuation\">(</span>\n                LayoutParams<span class=\"token punctuation\">.</span>WRAP_CONTENT<span class=\"token punctuation\">,</span>\n                LayoutParams<span class=\"token punctuation\">.</span>WRAP_CONTENT\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">setMargins</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">setImageResource</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_picker_image<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">addView</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>在 ViewGroup 创建时，同时创建子控件，并且调用 <code class=\"language-text\">addView()</code>。此时的 <code class=\"language-text\">addView</code> 并不会触发 <code class=\"language-text\">requestLayout</code>，因为 ViewGroup 还未 attach 到 window 中。</p>\n<h2>2. 重写 measure</h2>\n<p>测量难吗？其实大部分业务场景并不难。很多人也看过自定 View 的相关文档和文章，尤其对测量模式（<a href=\"https://developer.android.com/reference/android/view/View.MeasureSpec\">MeasureSpec</a>）印象深刻。其中的 <code class=\"language-text\">UNSPECIFIED</code>、<code class=\"language-text\">EXACTLY</code> 和 <code class=\"language-text\">AT_MOST</code> 以及各种情况排列组合形成了一张复杂的 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mo>×</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4 \\times 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span></span> 表格，让人头昏眼花 😵‍💫 。</p>\n<p>但实际上我们在大部分情况下，并不需要去处理相关逻辑。在此文章中，我也让不会将上述测量模式全都讲清楚，但是我们至少需要知道如下知识：</p>\n<ol>\n<li><code class=\"language-text\">onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int)</code> 中的 <code class=\"language-text\">widthMeasureSpec</code> 和 <code class=\"language-text\">heightMeasureSpec</code> 保存了测量模式 <code class=\"language-text\">mode</code>（高两位）和 尺寸 <code class=\"language-text\">size</code>（低 30 位）。</li>\n<li><code class=\"language-text\">onMeasure</code> 的两个参数，代表当前 View 的父布局对当前 View 的尺寸要求。父布局并不知道我们最终的尺寸，他只是给我们一个预期要求，希望我们遵守。如果我们不遵守，那他可能强行修改我们的尺寸。所以我们尽量遵守父布局的要求，这样对大家都好 :)</li>\n<li>View 的尺寸是结合父布局的要求来确定的。什么是父布局的「要求」呢？父布局会根据它自己的父布局的要求，以及在 XML 中取到的要被测量的子 View 的 <code class=\"language-text\">layout_width</code> 和 <code class=\"language-text\">layout_height</code> 这两个属性；根据其布局的特性（比如 LinearLayout 和 FrameLayout 就是不同的）计算出最后的 MeasureSpec。后面我们会举例子详述。</li>\n</ol>\n<p>我们先来看一段代码，非常简单：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">override fun <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token operator\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token operator\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上述是 ViewGroup 的默认实现。最后将走到 View 中的 <a href=\"https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/View.java;l=25539-25542?q=View.java\"><code class=\"language-text\">onMeasure</code></a> 方法:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// View#onMeasure()</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightMeasureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setMeasuredDimension</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDefaultSize</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSuggestedMinimumWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> widthMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">getDefaultSize</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSuggestedMinimumHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// View#getSuggestedMinimumWidth()</span>\n<span class=\"token comment\">// 这里主要考虑背景的大小是否有所影响</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getSuggestedMinimumWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mBackground <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> mMinWidth <span class=\"token operator\">:</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mMinWidth<span class=\"token punctuation\">,</span> mBackground<span class=\"token punctuation\">.</span><span class=\"token function\">getMinimumWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// View#getDefaultSize()</span>\n<span class=\"token comment\">// 默认的尺寸处理逻辑</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getDefaultSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> measureSpec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> specMode <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMode</span><span class=\"token punctuation\">(</span>measureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> specSize <span class=\"token operator\">=</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span>measureSpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>specMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 父布局对当前 View 没有要求，当前 View 直接是当前的测量结果</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">Measure</span> <span class=\"token class-name\">Spec</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UNSPECIFIED</span><span class=\"token operator\">:</span>\n        result <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 父布局对当前 View 有要求，最大值或者具体值，直接取父布局的要求</span>\n\t<span class=\"token comment\">// 所以 View 可能会变得比预期更大</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token constant\">AT_MOST</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token class-name\">MeasureSpec</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EXACTLY</span><span class=\"token operator\">:</span>\n        result <span class=\"token operator\">=</span> specSize<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>解释一下：</p>\n<ol>\n<li>ViewGroup 是 View 的子类，测量方法也是用的 View 的测量方法，所以默认实现不会根据子 View 的最终大小来实现。</li>\n<li><code class=\"language-text\">setMeasuredDimension</code> 保存当前 View 的计算尺寸。如果我们重写了 <code class=\"language-text\">onMeasure</code>，自定义尺寸后，需要调用它来保存。</li>\n</ol>\n<h3>2.1 测量流程</h3>\n<p>测量我们需要解决三个问题：</p>\n<ol>\n<li>要怎么测量？</li>\n<li>测量哪些？</li>\n<li>测量顺序？</li>\n</ol>\n<h4>2.1.1 要怎么实现测量？</h4>\n<p>来看一个简单的布局：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[LinearLayout, w: 50]\n    [ViewGroup_1, w: wrap_content, orientation: horizontal]\n        &lt;TextView_1, w: 20>\n        &lt;TextView_2, w: 20>\n        &lt;TextView_3, w: 20>\n    [ViewGroup_1]\n[LinearLayout]</code></pre></div>\n<p>我们将重写 <code class=\"language-text\">ViewGroup_1</code> 的 <code class=\"language-text\">onMeasure</code> 方法，实现自定义测量过程。我们上文讲到过，<code class=\"language-text\">onMeasure(widthMeasureSpec, heightMeasureSpec)</code>的两个参数，是父布局对我们的要求。对于 <code class=\"language-text\">ViewGrou_1</code> 来说，XML 中标注是 <code class=\"language-text\">wrap_content</code>，但因为父布局 LinearLayout 的宽度为 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>50</mn><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">50dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">50</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span></span>，所以最终  <code class=\"language-text\">ViewGrou_1</code> 的 <code class=\"language-text\">onMeasure</code> 收到的测量模式将是：<code class=\"language-text\">mode = AT_MOST</code>, <code class=\"language-text\">size = 50.dp</code>。</p>\n<p>同样的，我们也需要处理自身与子 View 的尺寸关系。这个关系说难也不难，说简单也有点麻烦。Android 封装了一个样板方法，你可以直接看<a href=\"https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewGroup.java;l=6979?q=ViewGroup.getChildMeasureSpec&#x26;sq=\">源码</a>，比我文字描述更加直白。\n该方法允许子 View 尽量无限制地去测量出最佳大小。所以我们在实现测量的时候，直接调用 <code class=\"language-text\">measureChildWithMargins</code> 方法即可。</p>\n<ul>\n<li><code class=\"language-text\">measureChildWithMargins</code>是什么？\n<ul>\n<li>它是 Android 给我们提供的样板方法，可以非常方便地测量子布局</li>\n<li>原理在 <a href=\"https://cs.android.com/android/platform/superproject/+/master:frameworks/base/core/java/android/view/ViewGroup.java;l=6979?q=ViewGroup.getChildMeasureSpec&#x26;sq=\">View#getChildMeasureSpec</a>；注释讲得非常清楚，此方法会根据父布局要求的测量模式和尺寸，以及自己的实际尺寸，计算出 Spec。</li>\n<li>此方法总是会给被测量的子 View 最佳的尺寸，也就是无限制的情况下的最佳尺寸。因为大部分控件我们都不会去做限制。</li>\n<li>计算出来 Spec 后，此方法内部调用 <code class=\"language-text\">child.measure(spec, spec)</code> 让子 View 去测量并保存尺寸</li>\n</ul>\n</li>\n<li><code class=\"language-text\">heightUsed</code> 和  <code class=\"language-text\">widthUsed</code> 是啥？\n<ul>\n<li>表示已经被使用了的宽或高。每当某个控件占据了一部分宽高，就需要在下一个控件测量时告诉它已经被使用的宽高，以便正确分配剩余空间</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 水平布局\n[CustomViewGroup, w: 50, orientation: horizontal]\n    &lt;TextView_1, w: 20> --> available 50, widthUsed 20, actual 20\n    &lt;TextView_2, w: 20> --> available 30, widthUsed 40, actual 20\n    &lt;TextView_3, w: 20> --> available 10, widthUsed 50, actual 10\n[ViewGroup]</code></pre></div>\n<p>在构建水平布局时，<code class=\"language-text\">CustomViewGroup</code> 宽度只有 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>50</mn><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">50dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">50</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span></span>。三个 TextView 优先级相等。那么：</p>\n<ul>\n<li>TextView_1 ：<code class=\"language-text\">CustomViewGroup</code> 已经被使用了 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">0dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">0</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span></span>，有 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>50</mn><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">50dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">50</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span></span> 的可用空间，最后只用了 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>20</mn><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">20dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">20</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span></span>\n<ul>\n<li><code class=\"language-text\">measureChildWithMargins(it, widthMeasureSpec, 0, heightMeasureSpec, heightUsed)</code></li>\n</ul>\n</li>\n<li>TextView_2 ：<code class=\"language-text\">CustomViewGroup</code> 已经被使用了 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>20</mn><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">20dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">20</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span></span>，可用空间有 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>30</mn><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">30dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">30</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span></span>，但只用了 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>20</mn><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">20dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">20</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span></span>\n<ul>\n<li><code class=\"language-text\">measureChildWithMargins(it, widthMeasureSpec, 20.dp, heightMeasureSpec, heightUsed)</code></li>\n</ul>\n</li>\n<li>TextView_3：<code class=\"language-text\">CustomViewGroup</code> 已经被使用了 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>40</mn><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">40dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">40</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span></span>；期望 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>20</mn><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">20dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">20</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span></span>，但只有 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">10dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">10</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span></span> 可用，所以只能用 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">10dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">10</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span></span>\n<ul>\n<li><code class=\"language-text\">measureChildWithMargins(it, widthMeasureSpec, 40.dp, heightMeasureSpec, heightUsed)</code></li>\n</ul>\n</li>\n</ul>\n<p>一句话总结：<strong><code class=\"language-text\">widthUsed</code> 和 <code class=\"language-text\">heightUsed</code> 就是已经被使用的空间。如果剩下的控件是按剩余空间分配的，那么就需要传递这两个值以便计算；如果不是按剩余空间分配，那么这两个值就是 0</strong>。</p>\n<p>讲完 <code class=\"language-text\">measureChildWithMargins</code> 其实就已经差不多了。测量的核心就在这里。一般情况下我们都不需要自己判断测量模式。如果真到了需要自己判断测量模式的时候，再去仔细研究也不迟。</p>\n<h4>2.1.2 需要测量哪些？</h4>\n<p>View 的显隐性不会影响其宽高，我们依然可以测量 <code class=\"language-text\">View.GONE</code> 的控件并获得正确尺寸。所以我们需要根据业务场景自己判断哪些不需要被测量。</p>\n<ul>\n<li>一般来说我们需要忽略 <code class=\"language-text\">View.GONE</code> 的控件，这样才符合大多数开发者的习惯。</li>\n<li>根据业务需求，延迟测量不需要显示的控件。这个是可选的，如果在此时延迟测量，那么后续视情况可能需要重新布局，要看具体场景和取舍。</li>\n</ul>\n<h4>2.1.3 测量顺序</h4>\n<p>在 Android 布局中，总是需要约束来决定控件的优先级。举个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[CustomViewGroup, orientaion: vertical]\n  &lt;TextView_1, visibility: View.GONE>\n  &lt;TextView_2, constraint: optional>\n  &lt;TextView_3, constraint: force>\n[CustomViewGroup]</code></pre></div>\n<p>此处用 <code class=\"language-text\">constraint</code> 表示显示约束。</p>\n<ul>\n<li><code class=\"language-text\">TextView_1</code> 是隐藏的，我们不测量</li>\n<li><code class=\"language-text\">TextView_2</code> 是可选的，当分配完 <code class=\"language-text\">TextView_3</code> 后的剩余空间就给它，否则就不显示</li>\n<li><code class=\"language-text\">TextView_3</code> 是强制的，优先级最高。优先保证它显示完全，如果还有剩余空间，再让其他控件分配</li>\n</ul>\n<p>我们将要实现如图所示的测量方式：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> heightUsed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> widthUsed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token comment\">// 遍历所有子控件</span>\n    children\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 过滤留下优先级最高的，且非 View.GONE 的控件</span>\n            it<span class=\"token punctuation\">.</span>visibility <span class=\"token operator\">!=</span> View<span class=\"token punctuation\">.</span>GONE <span class=\"token operator\">&amp;&amp;</span> it<span class=\"token punctuation\">.</span>constraint <span class=\"token operator\">==</span> Force\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 按照无限制尺寸去测量</span>\n            <span class=\"token function\">measureChildWithMargins</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> widthMeasureSpec<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">,</span> heightUsed<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 垂直布局，所以高度叠加，</span>\n            heightUsed <span class=\"token operator\">+=</span> it<span class=\"token punctuation\">.</span>measuredHeight\n            <span class=\"token comment\">// 垂直布局，宽度以最大子控件宽度为准</span>\n            widthUsed <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>widthUsed<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>measuredWidth<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 再测量优先级较低的 optional 列表</span>\n\t<span class=\"token function\">getOptionsList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 传递 widthUsed，子控件自己根据剩余空间来计算尺寸</span>\n            <span class=\"token comment\">// 而不再是无限制测量</span>\n            <span class=\"token function\">measureChildWithMargins</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">,</span> widthMeasureSpec<span class=\"token punctuation\">,</span> widthUsed<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">,</span> heightUsed<span class=\"token punctuation\">)</span>\t\n            <span class=\"token comment\">// 垂直布局，所以高度叠加，</span>\n            heightUsed <span class=\"token operator\">+=</span> it<span class=\"token punctuation\">.</span>measuredHeight\n            <span class=\"token comment\">// 垂直布局，宽度以最大子控件宽度为准</span>\n            widthUsed <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>widthUsed<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>measuredWidth<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 保存当前 ViewGroup 的尺寸</span>\n\t<span class=\"token function\">setMeasuredDimension</span><span class=\"token punctuation\">(</span>widthUsed<span class=\"token punctuation\">,</span> heightUsed<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>measure 的理论知识部分到这里就差不多了。更多的需要自己动手去尝试，去真正的实现，才能有更深的体会。后续会有文章介绍部分实践内容，敬请期待。接下来我们可以看下 layout 部分。</p>\n<p><strong>最后，如果你遇到</strong>…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">java.lang.ClassCastException: android.view.ViewGroup$LayoutParams cannot be cast to android.view.ViewGroup$MarginLayoutParams</code></pre></div>\n<p>不用担心，这个是因为我们在前面都没有讨论 margin 测量问题。其实这个也很简单。\n如果你的子 View 都是自己构建的，那么给子 View 设置 <code class=\"language-text\">layoutParams</code> 为 <code class=\"language-text\">MarginLayoutParams</code> 即可。或者重写 <code class=\"language-text\">generateDefaultLayoutParams</code> 方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">generateDefaultLayoutParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> LayoutParams <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token function\">MarginLayoutParams</span><span class=\"token punctuation\">(</span>LayoutParams<span class=\"token punctuation\">.</span>WRAP_CONTENT<span class=\"token punctuation\">,</span> LayoutParams<span class=\"token punctuation\">.</span>WRAP_CONTENT<span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果你仍有子 View 是来自 XML 的，当该 View 没有设置 <code class=\"language-text\">layour_margin</code> 相关属性时，系统默认为 <code class=\"language-text\">ViewGroup.LayoutParams</code>。那么我们直接在 <code class=\"language-text\">onMeasure</code> 时判断即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onMeasure</span><span class=\"token punctuation\">(</span>widthMeasureSpec<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> heightUsed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> widthUsed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    children\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>visibility <span class=\"token operator\">!=</span> View<span class=\"token punctuation\">.</span>GONE <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">forEachIndexed</span> <span class=\"token punctuation\">{</span> index<span class=\"token punctuation\">,</span> view <span class=\"token operator\">-></span>\n\t\t\t<span class=\"token comment\">// 判断 LayoutParams 类型</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">.</span>layoutParams <span class=\"token keyword\">is</span> MarginLayoutParams<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">measureChildWithMargins</span><span class=\"token punctuation\">(</span>\n                    view<span class=\"token punctuation\">,</span>\n                    widthMeasureSpec<span class=\"token punctuation\">,</span>\n                    widthUsed<span class=\"token punctuation\">,</span>\n                    heightMeasureSpec<span class=\"token punctuation\">,</span>\n                    heightUsed\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">measureChild</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> widthMeasureSpec<span class=\"token punctuation\">,</span> heightMeasureSpec<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            widthUsed <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>widthUsed<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">.</span>measuredWidth<span class=\"token punctuation\">)</span>\n            heightUsed <span class=\"token operator\">+=</span> view<span class=\"token punctuation\">.</span>measuredHeight <span class=\"token operator\">+</span> view<span class=\"token punctuation\">.</span>marginTop <span class=\"token operator\">+</span> view<span class=\"token punctuation\">.</span>marginBottom\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setMeasuredDimension</span><span class=\"token punctuation\">(</span>widthUsed<span class=\"token punctuation\">,</span> heightUsed<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>3. 重写 layout</h2>\n<p>layout 比 measure 更加简单。不需要做太多的比较和判断。我们在重写 <code class=\"language-text\">onLayout</code> 的过程中，一般关注：</p>\n<ol>\n<li>控件的排列顺序与互相位置约束</li>\n<li><code class=\"language-text\">margin</code> 和 <code class=\"language-text\">padding</code> 的处理：<code class=\"language-text\">View.measureWidth</code> 和 <code class=\"language-text\">View.measureHeight</code> 是不含 <code class=\"language-text\">margin</code> 的，所以你需要视情况来加上或减去 <code class=\"language-text\">margin</code> 值。同样的，我们也需要处理 ViewGroup 的 <code class=\"language-text\">padding</code> 对子 View 的影响。如果你的 <code class=\"language-text\">ViewGroup</code> 存在 <code class=\"language-text\">padding</code>，那么记得做好处理哦。</li>\n</ol>\n<p>对于 child 的布局，直接调用 <code class=\"language-text\">child.layout(0, 0, 0, 0)</code> 即可完成。在此部分更关注业务上的 UI 实现。比如一个简单的垂直的布局，可以这么写：</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\">ooverride <span class=\"token keyword\">fun</span> <span class=\"token function\">onLayout</span><span class=\"token punctuation\">(</span>changed<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span> l<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> t<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> r<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> heightUsed <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    children\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>visibility <span class=\"token operator\">!=</span> View<span class=\"token punctuation\">.</span>GONE <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">forEachIndexed</span> <span class=\"token punctuation\">{</span> index<span class=\"token punctuation\">,</span> it <span class=\"token operator\">-></span>\n            it<span class=\"token punctuation\">.</span><span class=\"token function\">layout</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> heightUsed<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>measuredWidth<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>measuredHeight <span class=\"token operator\">+</span> heightUsed<span class=\"token punctuation\">)</span>\n            heightUsed <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>bottom\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>是不是非常简单🤓 ～ 当然，这里需要你对 <code class=\"language-text\">View</code> 的位置关系有所了解。比如我常用 <code class=\"language-text\">View.bottom</code> 这类属性来作为上下左右约束。就像上述代码一样。</p>\n<p>不过有些场景，这是不够的：</p>\n<ul>\n<li>对于我们前面提到的 Chip 之类的标签布局，还需要考虑换行。这种时候就需要根据行的剩余宽度，与即将 layout 的子 View 比较，如果放不下，那么就要移到下一行去处理。</li>\n<li>对于约束在右边的控件，比如对其右边界此种，需要做一下减法计算。</li>\n</ul>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>C</mi><mi>u</mi><mi>s</mi><mi>t</mi><mi>o</mi><mi>m</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>G</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>p</mi><mi mathvariant=\"normal\">.</mi><mi>m</mi><mi>e</mi><mi>a</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo>−</mo><mi>C</mi><mi>u</mi><mi>s</mi><mi>t</mi><mi>o</mi><mi>m</mi><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>G</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>p</mi><mi mathvariant=\"normal\">.</mi><mi>p</mi><mi>a</mi><mi>d</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>E</mi><mi>n</mi><mi>d</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>m</mi><mi>e</mi><mi>a</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>W</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo>+</mo><mi>i</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>m</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>i</mi><mi>n</mi><mi>S</mi><mi>t</mi><mi>a</mi><mi>r</mi><mi>t</mi><mo>+</mo><mi>i</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>m</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>i</mi><mi>n</mi><mi>E</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x = CustomViewGroup.measuredWidth - CustomViewGroup.paddingEnd - (it.measuredWidth + it.marginStart + it.marginEnd)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">mVi</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">wG</span><span class=\"mord mathnormal\">ro</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">re</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">Wi</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">mVi</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">wG</span><span class=\"mord mathnormal\">ro</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">dd</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">re</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">Wi</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\">St</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span></span></div>\n<p>你可以抽象成一个函数，不过可能不便于其他维护者理解，这里就不赘述了。</p>\n<p>当然，还有更复杂的布局。比如环绕、圆形、瀑布流等等异型布局，就需要我们根据实际情况去实现啦。但是原理都是类似的。</p>\n<h2>4. 总结</h2>\n<p>我们从子控件初始化开始，讲到如何利用 <code class=\"language-text\">measureChild</code> 实现测量，以及如何布局。几乎把（我遇到的）常见的业务 UI 都包含在内。如果你能看到这里，我相信即便你还没有完全掌握渲染流程，但也能了解了六七分了😋 。不过仅有理论总归是不够的，后续我将会分享实践相关的文章，用一些简单方便入手的例子，帮助你快速掌握自定义 ViewGroup 的渲染流程。期待与你再见～</p>","frontmatter":{"title":"自定义布局其二：初始化、测量和布局","date":"2021-08-24","description":null,"excerpt":"首先说一下思路，自定义布局其实不难，核心点就是我们熟知的 measure 和 layout。这个和我们编写 XML 布局几乎是一致的，只是换了一种实现方式。如果我们用 Kotlin DSL 封装一下，可读性会大大提高。"}},"previous":{"fields":{"slug":"custom-viewgroup-1-cons-and-pros"},"frontmatter":{"title":"自定义布局其一：优劣势与使用场景"}},"next":{"fields":{"slug":"2021_summary"},"frontmatter":{"title":"认知与接纳：2021年终总结"}}},"pageContext":{"id":"3fc39f7e-e9fa-503e-94e1-3922871fc8ec","previousPostId":"618511a2-87a9-5d86-bd57-43667df94782","nextPostId":"23b39275-a1f5-5c72-b7e9-993c736b4439"}},"staticQueryHashes":["2082311839","2355076697","959449634"],"slicesMap":{}}