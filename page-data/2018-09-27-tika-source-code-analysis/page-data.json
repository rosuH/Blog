{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-09-27-tika-source-code-analysis/","result":{"data":{"site":{"siteMetadata":{"title":"Blog.kt"}},"markdownRemark":{"id":"dd6b87bd-85f0-587f-9fc3-fabeee6ddd7c","excerpt":"最简单的使用：。 其中新建一个实例的时候，初始化了默认的文件类型、文件解析类以及文件探测类。\n机会大部分工作都是在这里面做的。\n由于篇幅有限，我们略过开始的一些调用，让我们看到 Tika 库里的类，它实现了接口。\n所以我们的实际上是调用了这个类的方法哦。\n我先简述一下调用链。如果有感兴趣的读者，可以自行 debug…","html":"<p><code class=\"language-text\">Tika</code>最简单的使用：<code class=\"language-text\">new Tika().detect(file)</code>。</p>\n<p>其中新建一个<code class=\"language-text\">Tiak</code>实例的时候，初始化了默认的文件类型、文件解析类以及文件探测类。\n机会大部分工作都是在这里面做的。\n由于篇幅有限，我们略过开始的一些调用，让我们看到 Tika 库里的<code class=\"language-text\">MagicDetector</code>类，它实现了<code class=\"language-text\">Detector</code>接口。\n所以我们的<code class=\"language-text\">Tika().detect(file1)</code>实际上是调用了这个类的<code class=\"language-text\">detec()</code>方法哦。\n我先简述一下调用链。如果有感兴趣的读者，可以自行 debug 一下调用哦。</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Tika</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token class-name\">Tika</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TikaConfig</span> config<span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token class-name\">Tika</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Detector</span> detector<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Parser</span> parser<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// config.getDetector()，所以在 TikaConfig 里就有了 Detector，我们进这里看看</span>\n<span class=\"token class-name\">TikaConfig</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token class-name\">TikaConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">TikaConfig()</code>这个默认构造方法中中有下面三句比较重要的代码</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mimeTypes <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultMimeTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parser <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultParser</span><span class=\"token punctuation\">(</span>mimeTypes<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>detector <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultDetector</span><span class=\"token punctuation\">(</span>mimeTypes<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">getDefaultMimeTypes()</code>，最后是得到如下方法的返回值。在下面这个方法中，加载了库中的两个<code class=\"language-text\">xml</code>文件，前者存储了大部分已知文件类型的签名</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">MimeTypesFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tika-mimetypes.xml\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"custom-mimetypes.xml\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>比如下面是截取的<code class=\"language-text\">mp4</code>的文件签名：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token operator\">&lt;</span>mime<span class=\"token operator\">-</span>type type<span class=\"token operator\">=</span><span class=\"token string\">\"video/mp4\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>magic priority<span class=\"token operator\">=</span><span class=\"token string\">\"60\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>match value<span class=\"token operator\">=</span><span class=\"token string\">\"ftypmp41\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"string\"</span> offset<span class=\"token operator\">=</span><span class=\"token string\">\"4\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>match value<span class=\"token operator\">=</span><span class=\"token string\">\"ftypmp42\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"string\"</span> offset<span class=\"token operator\">=</span><span class=\"token string\">\"4\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>magic<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>glob pattern<span class=\"token operator\">=</span><span class=\"token string\">\"*.mp4\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>glob pattern<span class=\"token operator\">=</span><span class=\"token string\">\"*.mp4v\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>glob pattern<span class=\"token operator\">=</span><span class=\"token string\">\"*.mpg4\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>sub<span class=\"token operator\">-</span><span class=\"token keyword\">class</span><span class=\"token operator\">-</span>of type<span class=\"token operator\">=</span><span class=\"token string\">\"video/quicktime\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>mime<span class=\"token operator\">-</span>type<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>mime<span class=\"token operator\">-</span>type type<span class=\"token operator\">=</span><span class=\"token string\">\"video/mp4v-es\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">getDefaultParser(mimeTypes, loader)</code>，这个最后调用到<code class=\"language-text\">getDefaultParsers(ServiceLoader loader)</code>方法，通过加载器的方式，从库中读取<code class=\"language-text\">Parse.class</code>文件。</p>\n</li>\n<li>\n<p><code class=\"language-text\">getDefaultDetector(mimeTypes, loader)</code>，最后调到<code class=\"language-text\">getDefaultDetectors(MimeTypes types, ServiceLoader loader)</code>方法</p>\n</li>\n</ul>\n<p>在后者里面，看起来只是做了加载库里<code class=\"language-text\">Detector.class</code>文件的工作，实际上这里的<code class=\"language-text\">types</code>才是重头戏。<code class=\"language-text\">MimeTypes</code>类实现了<code class=\"language-text\">Detector</code>接口，实际上也有一个<code class=\"language-text\">detect()</code>方法。在<code class=\"language-text\">getDefaultDetectors(MimeTypes types, ServiceLoader loader)</code>方法中，有如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Detector</span><span class=\"token punctuation\">></span></span> detectors <span class=\"token operator\">=</span>\n        loader<span class=\"token punctuation\">.</span><span class=\"token function\">loadStaticServiceProviders</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Detector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>detectors<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Detector</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Detector</span> d1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Detector</span> d2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> n1 <span class=\"token operator\">=</span> d1<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> n2 <span class=\"token operator\">=</span> d2<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> t1 <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.apache.tika.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> t2 <span class=\"token operator\">=</span> n2<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.apache.tika.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t1 <span class=\"token operator\">==</span> t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> n1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Finally the Tika MimeTypes as a fallback</span>\ndetectors<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>types<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>代码中，先把从库里加载的<code class=\"language-text\">Detector.class</code>添加进去，然后再把<code class=\"language-text\">types</code>加到<code class=\"language-text\">detectors</code>这个列表里去。所以实际上后者保存了诸多<code class=\"language-text\">types</code>探测器对象。\n所以我们后来调用<code class=\"language-text\">tika.detect(file)</code>的时候，先使用了<code class=\"language-text\">Dector.class</code>，再使用默认的探测器，也就是那些<code class=\"language-text\">types</code>。\n所以我们逐步来看一下<code class=\"language-text\">MimeTypes.detect(InputStream input, Metadata metadata)</code>方法的实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">MediaType</span> type <span class=\"token operator\">=</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OCTET_STREAM</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Get type based on magic prefix</span>\n<span class=\"token comment\">// 基于 magic prefix 获取文件类型，实际上就是文件首部的一些字节</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    input<span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMinLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prefix <span class=\"token operator\">=</span> <span class=\"token function\">readMagicHeader</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        type <span class=\"token operator\">=</span> <span class=\"token function\">getMimeType</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        input<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">readMagicHeader(input)</code>，获取文件首部一定范围的字节，这个范围是多少呢？在<code class=\"language-text\">getMinLength()</code>方法里，直接返回了<code class=\"language-text\">64*1024</code>…真的是魔数</p>\n</li>\n<li>\n<p>这里调用了<code class=\"language-text\">getMineType(prefix)</code>，就是把文件首部的一定范围的字节传进去，判断类型，这个方法比较重要，我们可以看一下</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">MimeType</span> <span class=\"token function\">getMimeType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data is missing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// See https://issues.apache.org/jira/browse/TIKA-483</span>\n        <span class=\"token keyword\">return</span> rootMimeType<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Then, check for magic bytes</span>\n    <span class=\"token comment\">// 检查魔数字节的类型</span>\n    <span class=\"token comment\">// eval 就是判断当前字节和已知文件类型的头部字节是否相等</span>\n    <span class=\"token class-name\">MimeType</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Magic</span> magic <span class=\"token operator\">:</span> magics<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>magic<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> magic<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 如果不相等，那么返回 null</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// When detecting generic XML (or possibly XHTML),</span>\n        <span class=\"token comment\">// extract the root element and match it against known types</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"application/xml\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">||</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">XmlRootExtractor</span> extractor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlRootExtractor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">QName</span> rootElement <span class=\"token operator\">=</span> extractor<span class=\"token punctuation\">.</span><span class=\"token function\">extractRootElement</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootElement <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MimeType</span> type <span class=\"token operator\">:</span> xmls<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">matchesXML</span><span class=\"token punctuation\">(</span>\n                            rootElement<span class=\"token punctuation\">.</span><span class=\"token function\">getNamespaceURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            rootElement<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalPart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        result <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"application/xml\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// Downgrade from application/xml to text/plain since</span>\n                <span class=\"token comment\">// the document seems not to be well-formed.</span>\n                result <span class=\"token operator\">=</span> textMimeType<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 之前返回了 null，就假设她是一个文本类型，再使用文本探测器进行探测</span>\n    <span class=\"token comment\">// Finally, assume plain text if no control bytes are found</span>\n    <span class=\"token comment\">// 如果抛异常，那么就返回 application/octet-stream 类型，也就是二进制格式</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TextDetector</span> detector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDetector</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMinLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ByteArrayInputStream</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>detector<span class=\"token punctuation\">.</span><span class=\"token function\">detect</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Metadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> rootMimeType<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们接着来看<code class=\"language-text\">MimeTypes.detect(InputStream input, Metadata metadata)</code>方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// Get type based on resourceName hint (if available)</span>\n<span class=\"token comment\">// 根据文件名类获取类型</span>\n<span class=\"token class-name\">String</span> resourceName <span class=\"token operator\">=</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Metadata</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RESOURCE_NAME_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resourceName <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Deal with a URI or a path name in as the resource  name</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">URI</span> uri <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URI</span><span class=\"token punctuation\">(</span>resourceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> path <span class=\"token operator\">=</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> slash <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>slash <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                name <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>slash <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">URISyntaxException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        name <span class=\"token operator\">=</span> resourceName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 这里判断了一下根据文件签名字节获取的类型是否和文件名类型相等，如果不相等，则优先使用文件签名字节类型</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MediaType</span> hint <span class=\"token operator\">=</span> <span class=\"token function\">getMimeType</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">.</span><span class=\"token function\">isSpecializationOf</span><span class=\"token punctuation\">(</span>hint<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            type <span class=\"token operator\">=</span> hint<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 根据文件的元数据来获取信息</span>\n<span class=\"token comment\">// Get type based on metadata hint (if available)</span>\n<span class=\"token class-name\">String</span> typeName <span class=\"token operator\">=</span> metadata<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Metadata</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONTENT_TYPE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>typeName <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 这里判断了一下前面获取的类型是否和文件元数据给出的相等，如果不相等，则优先使用文件签名字节类型</span>\n        <span class=\"token class-name\">MediaType</span> hint <span class=\"token operator\">=</span> <span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>typeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">.</span><span class=\"token function\">isSpecializationOf</span><span class=\"token punctuation\">(</span>hint<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            type <span class=\"token operator\">=</span> hint<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MimeTypeException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Malformed type name, ignore</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span></code></pre></div>\n<p>从这里我们可以看出，最优先的判断标准依旧是文件的签名，也就是文件的首部字节</p>\n<p>首先我们的调用来到了<code class=\"language-text\">MimeTypes.getMimeType(byte[] data)</code>方法，在这里，我们传入了由待探测文件的头部字节组成的字节数组。\n在这个方法里面，有如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Then, check for magic bytes</span>\n<span class=\"token class-name\">MimeType</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Magic</span> magic <span class=\"token operator\">:</span> magics<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>magic<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">=</span> magic<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的<code class=\"language-text\">magics</code>是个<code class=\"language-text\">Magic</code>类的列表，这个列表是在<code class=\"language-text\">new Tika()</code>语句，也就是构造<code class=\"language-text\">Tika</code>对象的时候被初始化的。\n在当时，程序加载了库里的<code class=\"language-text\">tika-mimetypes.xml</code>文件，这个文件中存放了大部分的已知文件类型的头部信息、偏移量等。这些文件被加载存储在一个<code class=\"language-text\">MimeTypes</code>对象里面。\n而创建这个对象的时候需要创建一个<code class=\"language-text\">MimeTypesReader</code>对象，<code class=\"language-text\">MimeTypesReader</code>继承了<code class=\"language-text\">DefaultHandler</code>对象，这个对象是用来解析<code class=\"language-text\">xml</code>文件的处理类。\n实际上在<code class=\"language-text\">MimeTypes</code>文件中有这么一个方法，是在初始化的时候调用的：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MimeType</span> type <span class=\"token operator\">:</span> types<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        magics<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">getMagics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">hasRootXML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            xmls<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>magics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>xmls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Magic</span><span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token class-name\">MagicMatch</span><span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> \n<span class=\"token function\">getDetector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">detect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Metadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// detector 如果为空，那么调用 MagicDetector.parse() 生成 dector</span>\n <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token class-name\">MagicDetecor</span><span class=\"token punctuation\">.</span><span class=\"token function\">detec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>终于到了最终的方法了，让我们一起来看看这个方法的实际实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n    * \n    * @param input document input stream, or &lt;code>null&lt;/code>\n    * @param metadata ignored\n    */</span>\n    <span class=\"token comment\">// 我们传入的文件会被打开为输入流，而该文件的文件名和长度会被存储在 Metadata 类中，该类实际上是一个 Map 哦</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">MediaType</span> <span class=\"token function\">detect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> input<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Metadata</span> metadata<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果文件流为空，返回默认的文件类型，也就是『二进制文件』</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OCTET_STREAM</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n    * InputSteam 的 mark 是一个空方法，实际上传入的是一个 TikaInputStream 变量，他实现了这个方法\n    * 这个方法做的，只是记录读到流哪个的位置\n    */</span>\n    input<span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span>offsetRangeEnd <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/** Skip bytes at the beginning, using skip() or read()\n        * 跳过初始的一些字节，offsetRangeEnd 默认是 0 ，有一些文件的有效识别字符串不在文件的开头，所以需要跳过无效的区域\n        * 有一些文件需要跳过的，比如 ISO 镜像类文件可以参看 [Magic Bytes](https://tool.lu/magicbytes/)\n        * 这些信息保存在 tika-mimetypes.xml 文件中\n        */</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> offsetRangeBegin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">long</span> n <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span>offsetRangeBegin <span class=\"token operator\">-</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                offset <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                offset <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OCTET_STREAM</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Fill in the comparison window</span>\n        <span class=\"token comment\">// 新建一个缓冲块，大小是（尾偏移 - 首偏移 + 文件长度），首尾偏移都是正向偏移</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span>\n            <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>length <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>offsetRangeEnd <span class=\"token operator\">-</span> offsetRangeBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 读进缓冲块，返回实际上读的是字节数</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 递增偏移量</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            offset <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> offset <span class=\"token operator\">&lt;</span> offsetRangeEnd <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> bufferOffset <span class=\"token operator\">=</span> offset <span class=\"token operator\">-</span> offsetRangeBegin<span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>\n                    buffer<span class=\"token punctuation\">,</span> bufferOffset<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> bufferOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// increment offset - in case not all read (see testDetectStreamReadProblems)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                offset <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 如果是正则类型的，则用正则来匹配</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isRegex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Pattern</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">ByteBuffer</span> bb <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">CharBuffer</span> result <span class=\"token operator\">=</span> <span class=\"token constant\">ISO_8859_1</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>bb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Matcher</span> m <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">boolean</span> match <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Loop until we've covered the entire offset range</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> offsetRangeEnd <span class=\"token operator\">-</span> offsetRangeBegin<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                m<span class=\"token punctuation\">.</span><span class=\"token function\">region</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>  length<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                match <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">lookingAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// match regex from start of region</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 如果不是，那么逐个字节进行比较</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">&lt;</span> offsetRangeBegin <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OCTET_STREAM</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// Loop until we've covered the entire offset range</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> offsetRangeEnd <span class=\"token operator\">-</span> offsetRangeBegin<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">boolean</span> match <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> match <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    match <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pattern<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OCTET_STREAM</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        input<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>结语</h1>\n<p>本文章只是捡了 Tika 库中极少部分的代码来分析，在看源码的过程中，深感自己能力不足。\n所以本文也难免有错误缺漏，如果有的话，恳请诸君能不吝赐教~</p>\n<p><em>参看</em></p>\n<ul>\n<li>\n<p><a href=\"https://tika.apache.org/\">Tika Apache</a></p>\n</li>\n<li>\n<p><a href=\"https://kb.iu.edu/d/agtj\">About “application/octet-stream” MIME attachments</a></p>\n</li>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/7039467/java-serviceloader-with-multiple-classloaders\">Java ServiceLoader with multiple Classloaders</a></p>\n</li>\n<li>\n<p><a href=\"https://tool.lu/magicbytes/\">Magic Bytes</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/sir_zeng/article/details/17710013\">DefaultHandler中方法解读</a></p>\n</li>\n</ul>","frontmatter":{"title":"Tika 源码浅析","date":"2018-09-27","description":"Tika，一个用于检测和分析文件的库。今天我们来小探其看源码...","excerpt":null}},"previous":{"fields":{"slug":"android-get-sd-card-path-and-uuid"},"frontmatter":{"title":"Android 获取 SD 卡路径和 UUID"}},"next":{"fields":{"slug":"from-asynchronous-thread-to-rxjava-backpressure"},"frontmatter":{"title":"从异步线程到 RxJava 的背压控制"}}},"pageContext":{"id":"dd6b87bd-85f0-587f-9fc3-fabeee6ddd7c","previousPostId":"a179ceb7-2880-59a2-9abc-13ca1cea7792","nextPostId":"ed6e4661-52b8-50cd-9f3b-3a601988187e"}},"staticQueryHashes":["2082311839","2355076697","959449634"],"slicesMap":{}}